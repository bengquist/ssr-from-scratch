!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=6)}([function(e,t){e.exports=require("react")},function(e,t){e.exports=require("react-redux")},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=o(r(48)),s=o(r(11)),i=o(r(12));t.default=[n({},u.default,{routes:[n({},s.default,{path:"/",exact:!0}),n({},i.default,{path:"/users"})]})]},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FETCH_USERS="FETCH_USERS"},function(e,t){e.exports=require("react-router-config")},function(e,t){e.exports=require("redux")},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,u){function s(e){try{a(n.next(e))}catch(e){u(e)}}function i(e){try{a(n.throw(e))}catch(e){u(e)}}function a(e){e.done?o(e.value):new r(function(t){t(e.value)}).then(s,i)}a((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,u,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function i(u){return function(i){return function(u){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&u[0]?n.return:u[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,u[1])).done)return o;switch(n=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return s.label++,{value:u[1],done:!1};case 5:s.label++,n=u[1],u=[0];continue;case 7:u=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===u[0]||2===u[0])){s=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){s.label=u[1];break}if(6===u[0]&&s.label<o[1]){s.label=o[1],o=u;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(u);break}o[2]&&s.ops.pop(),s.trys.pop();continue}u=t.call(e,s)}catch(e){u=[6,e],n=0}finally{r=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,i])}}},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},s=this;Object.defineProperty(t,"__esModule",{value:!0});var i=u(r(7)),a=u(r(8)),c=u(r(16)),f=r(4),l=u(r(2)),p=u(r(25)),d=i.default();d.use("/api",p.default("http://react-ssr-api.herokuapp.com",{proxyReqOptDecorator:function(e){return e.headers&&(e.headers["x-forwarded-host"]="localhost:3000"),e}})),d.use(i.default.static("public")),d.get("*",function(e,t){return n(s,void 0,void 0,function(){var r,n;return o(this,function(o){switch(o.label){case 0:return r=c.default(e),n=f.matchRoutes(l.default,e.path).map(function(e){var t=e.route;return t.loadData?t.loadData(r):null}),[4,Promise.all(n)];case 1:return o.sent(),t.send(a.default(e,r)),[2]}})})}),d.listen(3e3,function(){return console.log("listening on port 3000")})},function(e,t){e.exports=require("express")},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(0)),u=r(9),s=r(10),i=r(1),a=n(r(2)),c=r(4),f=n(r(15));t.default=function(e,t){return'\n  <html>\n    <head></head>\n      <body>\n        <div id="root">'+u.renderToString(o.default.createElement(i.Provider,{store:t},o.default.createElement(s.StaticRouter,{location:e.path,context:{}},o.default.createElement("div",null,c.renderRoutes(a.default)))))+"</div>\n          <script>\n            window.INITIAL_STATE = "+f.default(t.getState())+'\n          <\/script>\n        <script src="bundle.js"><\/script>\n      </body>\n  </html>\n  '}},function(e,t){e.exports=require("react-dom/server")},function(e,t){e.exports=require("react-router-dom")},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(0));t.default={component:function(){return o.default.createElement("div",null,o.default.createElement("h1",null,"I am Home!!!"),o.default.createElement("button",{onClick:function(){return console.log("yoooo")}},"Click Me!"))}}},function(e,t,r){"use strict";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(0)),u=r(1),s=r(13);var i=function(e){return e.dispatch(s.fetchUsers())};t.loadData=i,t.default={loadData:i,component:u.connect(function(e){return{users:e.users}},{fetchUsers:s.fetchUsers})(function(e){return o.useEffect(function(){e.fetchUsers()},[]),o.default.createElement("div",null,o.default.createElement("p",null,"Here is a big list of users"),o.default.createElement("ul",null,e.users.map(function(e){return o.default.createElement("li",{key:e.id},e.name)})))})}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,u){function s(e){try{a(n.next(e))}catch(e){u(e)}}function i(e){try{a(n.throw(e))}catch(e){u(e)}}function a(e){e.done?o(e.value):new r(function(t){t(e.value)}).then(s,i)}a((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,u,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function i(u){return function(i){return function(u){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&u[0]?n.return:u[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,u[1])).done)return o;switch(n=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return s.label++,{value:u[1],done:!1};case 5:s.label++,n=u[1],u=[0];continue;case 7:u=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===u[0]||2===u[0])){s=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){s.label=u[1];break}if(6===u[0]&&s.label<o[1]){s.label=o[1],o=u;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(u);break}o[2]&&s.ops.pop(),s.trys.pop();continue}u=t.call(e,s)}catch(e){u=[6,e],n=0}finally{r=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,i])}}},u=this;Object.defineProperty(t,"__esModule",{value:!0});var s=r(3);t.fetchUsers=function(){return function(e,t,r){return n(u,void 0,void 0,function(){var t;return o(this,function(n){switch(n.label){case 0:return[4,r.get("/users")];case 1:return t=n.sent(),e({type:s.FETCH_USERS,payload:t}),[2]}})})}}},function(e,t){e.exports=require("axios")},function(e,t){e.exports=require("serialize-javascript")},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(5),u=n(r(17)),s=n(r(14)),i=n(r(18));t.default=function(e){var t=s.default.create({baseURL:"http://react-ssr-api.herokuapp.com",headers:{cookie:e.get("cookie")||""}});return o.createStore(i.default,{},o.applyMiddleware(u.default.withExtraArgument(t)))}},function(e,t){e.exports=require("redux-thunk")},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(5),u=n(r(19)),s=n(r(50)),i=o.combineReducers({users:u.default,auth:s.default});t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(3);t.default=function(e,t){switch(void 0===e&&(e=[]),t.type){case n.FETCH_USERS:return t.payload.data;default:return e}}},function(e,t){e.exports=require("debug")},function(e,t,r){"use strict";e.exports=function(e){return void 0===e||""===e||null===e}},function(e,t,r){"use strict";var n=r(30),o=r(31),u=r(23),s=r(32),i=r(21);function a(e,t){var r=t.headers||{},n=["connection","content-length"];t.preserveHostHdr||n.push("host");var o=function(e,t,r){if(!t)return e;for(var n in t)r&&-1!==r.indexOf(n)||(e[n]=t[n]);return e}(r,e.headers,n);return o.connection="close",o}e.exports={create:function(e,t,r){var n={headers:a(e,r),method:e.method,path:e.path,params:e.params};return r.preserveReqSession&&(n.session=e.session),Promise.resolve(n)},bodyContent:function(e,t,r){if(i(r.parseReqBody)||r.parseReqBody)return function(e,t){return e.body?Promise.resolve(e.body):s(e,{length:e.headers["content-length"],limit:t})}(e,r.limit)},parseHost:function(e){var t=e.params.host,r=e.user.req,s=e.options;if(!(t="function"==typeof t?t(r):t.toString()))return new Error("Empty host parameter");/http(s)?:\/\//.test(t)||(t="http://"+t);var i=u.parse(t);if(!i.hostname)return new Error("Unable to parse hostname, possibly missing protocol://?");var a=s.https||"https:"===i.protocol;return{host:i.hostname,port:i.port||(a?443:80),module:a?o:n}}}},function(e,t){e.exports=require("url")},function(e,t,r){"use strict";e.exports={buffer:function(e,t){var r;return Buffer.isBuffer(e)?r=e:"object"==typeof e?r=new Buffer(JSON.stringify(e),t.reqBodyEncoding):"string"==typeof e&&(r=new Buffer(e,t.reqBodyEncodeing)),r},bufferOrString:function(e){var t;return Buffer.isBuffer(e)?t=e:"object"==typeof e?t=JSON.stringify(e):"string"==typeof e&&(t=e),t}}},function(e,t,r){"use strict";var n=r(26),o=r(28),u=r(20)("express-http-proxy"),s=r(29),i=r(33),a=r(34),c=r(35),f=r(36),l=r(38),p=r(39),d=r(40),h=r(41),y=r(42),v=r(43),x=r(44),m=r(45),b=r(47);e.exports=function(e,t){return o(e,"Host should not be empty"),function(r,o,_){u("[start proxy] "+r.path);var g=new n(r,o,_,e,t);p(g).then(s).then(v).then(c).then(x).then(a).then(y).then(m).then(h).then(i).then(l).then(f).then(b).catch(function(e){e?(g.options.proxyErrorHandler?g.options.proxyErrorHandler:d)(e,o,_):_()})}}},function(e,t,r){"use strict";var n=r(27);e.exports=function(e,t,r,o,u){return{user:{req:e,res:t,next:r},proxy:{req:void 0,res:void 0,resData:void 0,bodyContent:void 0,reqBuilder:{}},options:n(u),params:{host:o,userOptions:u}}}},function(e,t,r){"use strict";var n=r(20)("express-http-proxy"),o=r(21);e.exports=function(e){var t,r;if((e=e||{}).decorateRequest)throw new Error("decorateRequest is REMOVED; use proxyReqOptDecorator andproxyReqBodyDecorator instead.  see README.md");return(e.forwardPath||e.forwardPathAsync)&&console.warn("forwardPath and forwardPathAsync are DEPRECATEDand should be replaced with proxyReqPathResolver"),e.intercept&&console.warn("DEPRECATED: intercept. Use decorateUseRes instead. Please see README for more information."),(t={limit:e.limit||"1mb",proxyReqPathResolver:e.proxyReqPathResolver||e.forwardPathAsync||e.forwardPath,proxyReqOptDecorator:e.proxyReqOptDecorator,proxyReqBodyDecorator:e.proxyReqBodyDecorator,userResDecorator:e.userResDecorator||e.intercept,userResHeaderDecorator:e.userResHeaderDecorator,proxyErrorHandler:e.proxyErrorHandler,filter:e.filter,parseReqBody:!!o(e.parseReqBody)||e.parseReqBody,preserveHostHdr:e.preserveHostHdr,memoizeHost:!!o(e.memoizeHost)||e.memoizeHost,reqBodyEncoding:(r=e.reqBodyEncoding,void 0!==r?r:"utf-8"),skipToNextHandlerFilter:e.skipToNextHandlerFilter,headers:e.headers,preserveReqSession:e.preserveReqSession,https:e.https,port:e.port,reqAsBuffer:e.reqAsBuffer,timeout:e.timeout}).stream=!t.skipToNextHandlerFilter&&!t.userResDecorator&&!t.userResHeaderDecorator,n(t),t}},function(e,t){e.exports=require("assert")},function(e,t,r){"use strict";var n=r(20)("express-http-proxy"),o=r(22);e.exports=function(e){var t=e.user.req,r=e.user.res,u=e.options,s=e.proxy.host,i=u.parseReqBody?o.bodyContent(t,r,u):Promise.resolve(null),a=o.create(t,r,u,s);return Promise.all([i,a]).then(function(t){return e.proxy.bodyContent=t[0],e.proxy.reqBuilder=t[1],n("proxy request options:",e.proxy.reqBuilder),e})}},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("https")},function(e,t){e.exports=require("raw-body")},function(e,t,r){"use strict";e.exports=function(e){return new Promise(function(t){var r=e.user.res,n=e.proxy.res;r.headersSent||(r.status(n.statusCode),Object.keys(n.headers).filter(function(e){return"transfer-encoding"!==e}).forEach(function(e){r.set(e,n.headers[e])})),t(e)})}},function(e,t,r){"use strict";var n=r(20)("express-http-proxy");function o(e){return e}e.exports=function(e){var t=e.options.proxyReqBodyDecorator,r=t||o;return t&&n("using custom proxyReqBodyDecorator"),Promise.resolve(r(e.proxy.bodyContent,e.user.req)).then(function(t){return e.proxy.bodyContent=t,Promise.resolve(e)})}},function(e,t,r){"use strict";var n=r(20)("express-http-proxy");function o(e){return e}e.exports=function(e){var t=e.options.proxyReqOptDecorator||o;return Promise.resolve(t(e.proxy.reqBuilder,e.user.req)).then(function(t){return delete t.params,e.proxy.reqBuilder=t,n("Request options (after processing): %o",t),Promise.resolve(e)})}},function(e,t,r){"use strict";var n=r(24),o=r(20)("express-http-proxy"),u=r(37);function s(e){return function(t,r){return function(e){return"gzip"===e.headers["content-encoding"]}(r)&&t.length?u[e](t):t}}var i=s("gunzipSync"),a=s("gzipSync");e.exports=function(e){var t=e.options.userResDecorator;if(!t)return Promise.resolve(e);var r=i(e.proxy.resData,e.proxy.res),u=e.proxy.res,s=e.user.req,c=e.user.res;return 304===c.statusCode?(o("Skipping userResDecorator on response 304"),Promise.resolve(e)):Promise.resolve(t(u,r,s,c)).then(function(t){return new Promise(function(o,u){var s=n.buffer(t,e.options);!function(e,t){Buffer.isBuffer(e)||t(new Error("userResDecorator should return string or buffer as data"))}(s,u),function(e,t,r,n){e.headersSent?r.length!==t.length&&n(new Error('"Content-Length" is already sent,the length of response data can not be changed')):e.set("content-length",r.length)}(c,r,s,u),e.proxy.resData=a(s,e.proxy.res),o(e)})})}},function(e,t){e.exports=require("zlib")},function(e,t,r){"use strict";e.exports=function(e){var t=e.options.userResHeaderDecorator,r=e.user.res._headers;return t?Promise.resolve(t(r,e.user.req,e.user.res,e.proxy.req,e.proxy.res)).then(function(t){return new Promise(function(r){e.user.res.set(t),r(e)})}):Promise.resolve(e)}},function(e,t,r){"use strict";function n(e,t){return!0}e.exports=function(e){var t=e.options.filter||n;return Promise.resolve(t(e.user.req,e.user.res)).then(function(t){return t?Promise.resolve(e):Promise.reject()})}},function(e,t,r){"use strict";var n=r(20)("express-http-proxy");e.exports=function(e,t,r){switch(e&&e.code){case"ECONNRESET":return function(e,t){e&&"ECONNRESET"===e.code&&(n("Error: Connection reset due to timeout."),t.setHeader("X-Timeout-Reason","express-http-proxy reset the request."),t.writeHead(504,{"Content-Type":"text/plain"}),t.end())}(e,t);default:r(e)}}},function(e,t,r){"use strict";function n(){return!1}e.exports=function(e){var t=e.options.skipToNextHandlerFilter||n;return Promise.resolve(t(e.proxy.res)).then(function(t){return t?(e.user.res.expressHttpProxy=e.proxy,Promise.reject(e.user.next())):Promise.resolve(e)})}},function(e,t,r){"use strict";var n=r(24);e.exports=function(e){return new Promise(function(t){var r,o,u=e.proxy.bodyContent,s=e.proxy.reqBuilder;u&&(u=e.options.reqAsBuffer?n.buffer(u,e.options):n.bufferOrString(u),s.headers["content-length"]=(r=u,Buffer.isBuffer(r)?o=r.length:"string"==typeof r&&(o=Buffer.byteLength(r)),o),e.options.reqBodyEncoding&&(s.headers["Accept-Charset"]=e.options.reqBodyEncoding)),e.proxy.bodyContent=u,t(e)})}},function(e,t,r){"use strict";var n=r(22);e.exports=function(e){var t;return t=e.options.memoizeHost&&e.options.memoizedHost?e.options.memoizedHost:n.parseHost(e),e.proxy.reqBuilder.host=t.host,e.proxy.reqBuilder.port=e.options.port||t.port,e.proxy.requestModule=t.module,Promise.resolve(e)}},function(e,t,r){"use strict";var n=r(23),o=r(20)("express-http-proxy");function u(e){return n.parse(e.url).path}e.exports=function(e){var t=e.options.proxyReqPathResolver||u;return Promise.resolve(t(e.user.req)).then(function(t){return e.proxy.reqBuilder.path=t,o("resolved proxy path:",t),Promise.resolve(e)})}},function(e,t,r){"use strict";var n=r(46);e.exports=function(e){var t=e.user.req,r=e.proxy.bodyContent,o=e.proxy.reqBuilder,u=e.options;return new Promise(function(s,i){var a=e.proxy.requestModule,c=e.proxy.req=a.request(o,function(t){if(u.stream)return e.proxy.res=t,s(e);var r=[];t.on("data",function(e){r.push(e)}),t.on("end",function(){e.proxy.res=t,e.proxy.resData=Buffer.concat(r,n(r)),s(e)}),t.on("error",i)});if(c.on("socket",function(e){u.timeout&&e.setTimeout(u.timeout,function(){c.abort()})}),c.on("error",i),u.parseReqBody){if(r.length){var f=r,l=c.getHeader("Content-Type");if("x-www-form-urlencoded"===l||"application/x-www-form-urlencoded"===l)try{var p=JSON.parse(f);f=Object.keys(p).map(function(e){return e+"="+p[e]}).join("&")}catch(e){}c.setHeader("Content-Length",Buffer.byteLength(f)),c.write(f)}c.end()}else t.pipe(c);t.on("aborted",function(){c.abort()})})}},function(e,t,r){"use strict";e.exports=function(e){return e.reduce(function(e,t){return e+t.length},0)}},function(e,t,r){"use strict";e.exports=function(e){return e.user.res.headersSent||(e.options.stream?e.proxy.res.pipe(e.user.res):e.user.res.send(e.proxy.resData)),Promise.resolve(e)}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(0)),u=r(4),s=n(r(49)),i=r(52);t.default={component:function(e){var t=e.route;return o.default.createElement("div",null,o.default.createElement(s.default,null),u.renderRoutes(t.routes))},loadData:function(e){return(0,e.dispatch)(i.fetchCurrentUser())}}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(0)),u=r(10),s=r(1);t.default=s.connect(function(e){return{auth:e.auth}})(function(e){var t=e.auth;console.log(t);var r=t?o.default.createElement("a",{href:"/api/logout"},"Logout"):o.default.createElement("a",{href:"/api/auth/google"},"Login");return o.default.createElement("div",null,o.default.createElement(u.Link,{to:"/"},"React SSR"),o.default.createElement("div",null,o.default.createElement(u.Link,{to:"/users"},"Users"),o.default.createElement(u.Link,{to:"/admins"},"Admins"),r))})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(51);t.default=function(e,t){switch(void 0===e&&(e=null),t.type){case n.FETCH_CURRENT_USER:return t.payload.data||!1;default:return e}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FETCH_CURRENT_USER="FETCH_CURRENT_USER"},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,u){function s(e){try{a(n.next(e))}catch(e){u(e)}}function i(e){try{a(n.throw(e))}catch(e){u(e)}}function a(e){e.done?o(e.value):new r(function(t){t(e.value)}).then(s,i)}a((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,u,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function i(u){return function(i){return function(u){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&u[0]?n.return:u[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,u[1])).done)return o;switch(n=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return s.label++,{value:u[1],done:!1};case 5:s.label++,n=u[1],u=[0];continue;case 7:u=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===u[0]||2===u[0])){s=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){s.label=u[1];break}if(6===u[0]&&s.label<o[1]){s.label=o[1],o=u;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(u);break}o[2]&&s.ops.pop(),s.trys.pop();continue}u=t.call(e,s)}catch(e){u=[6,e],n=0}finally{r=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,i])}}},u=this;Object.defineProperty(t,"__esModule",{value:!0});var s=r(51);t.fetchCurrentUser=function(){return function(e,t,r){return n(u,void 0,void 0,function(){var t;return o(this,function(n){switch(n.label){case 0:return[4,r.get("/current_user")];case 1:return t=n.sent(),e({type:s.FETCH_CURRENT_USER,payload:t}),[2]}})})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicmVhY3RcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWFjdC1yZWR1eFwiIiwid2VicGFjazovLy8uL3NyYy9yb3V0ZXMvUm91dGVzLnRzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS91c2VyL3R5cGVzLnRzIiwid2VicGFjazovLy9leHRlcm5hbCBcInJlYWN0LXJvdXRlci1jb25maWdcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWR1eFwiIiwid2VicGFjazovLy8uL3NlcnZlci9pbmRleC50c3giLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZXhwcmVzc1wiIiwid2VicGFjazovLy8uL3NlcnZlci9yZW5kZXJlci50c3giLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicmVhY3QtZG9tL3NlcnZlclwiIiwid2VicGFjazovLy9leHRlcm5hbCBcInJlYWN0LXJvdXRlci1kb21cIiIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvSG9tZVBhZ2UudHN4Iiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9Vc2Vyc0xpc3RQYWdlLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvdXNlci9hY3Rpb25zLnRzIiwid2VicGFjazovLy9leHRlcm5hbCBcImF4aW9zXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwic2VyaWFsaXplLWphdmFzY3JpcHRcIiIsIndlYnBhY2s6Ly8vLi9zZXJ2ZXIvc3RvcmUvY3JlYXRlU3RvcmUudHMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicmVkdXgtdGh1bmtcIiIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL3VzZXIvcmVkdWNlcnMudHMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZGVidWdcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXhwcmVzcy1odHRwLXByb3h5L2xpYi9pc1Vuc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHByZXNzLWh0dHAtcHJveHkvbGliL3JlcXVlc3RPcHRpb25zLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcInVybFwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHByZXNzLWh0dHAtcHJveHkvbGliL2FzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHByZXNzLWh0dHAtcHJveHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4cHJlc3MtaHR0cC1wcm94eS9saWIvc2NvcGVDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4cHJlc3MtaHR0cC1wcm94eS9saWIvcmVzb2x2ZU9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiYXNzZXJ0XCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4cHJlc3MtaHR0cC1wcm94eS9hcHAvc3RlcHMvYnVpbGRQcm94eVJlcS5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJodHRwXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiaHR0cHNcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyYXctYm9keVwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHByZXNzLWh0dHAtcHJveHkvYXBwL3N0ZXBzL2NvcHlQcm94eVJlc0hlYWRlcnNUb1VzZXJSZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4cHJlc3MtaHR0cC1wcm94eS9hcHAvc3RlcHMvZGVjb3JhdGVQcm94eVJlcUJvZHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4cHJlc3MtaHR0cC1wcm94eS9hcHAvc3RlcHMvZGVjb3JhdGVQcm94eVJlcU9wdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4cHJlc3MtaHR0cC1wcm94eS9hcHAvc3RlcHMvZGVjb3JhdGVVc2VyUmVzLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcInpsaWJcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXhwcmVzcy1odHRwLXByb3h5L2FwcC9zdGVwcy9kZWNvcmF0ZVVzZXJSZXNIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHByZXNzLWh0dHAtcHJveHkvYXBwL3N0ZXBzL2ZpbHRlclVzZXJSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHByZXNzLWh0dHAtcHJveHkvYXBwL3N0ZXBzL2hhbmRsZVByb3h5RXJyb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHByZXNzLWh0dHAtcHJveHkvYXBwL3N0ZXBzL21heWJlU2tpcFRvTmV4dEhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4cHJlc3MtaHR0cC1wcm94eS9hcHAvc3RlcHMvcHJlcGFyZVByb3h5UmVxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHByZXNzLWh0dHAtcHJveHkvYXBwL3N0ZXBzL3Jlc29sdmVQcm94eUhvc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4cHJlc3MtaHR0cC1wcm94eS9hcHAvc3RlcHMvcmVzb2x2ZVByb3h5UmVxUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXhwcmVzcy1odHRwLXByb3h5L2FwcC9zdGVwcy9zZW5kUHJveHlSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHByZXNzLWh0dHAtcHJveHkvbGliL2NodW5rTGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHByZXNzLWh0dHAtcHJveHkvYXBwL3N0ZXBzL3NlbmRVc2VyUmVzLmpzIiwid2VicGFjazovLy8uL3NyYy9BcHAudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hlYWRlci50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL2F1dGgvcmVkdWNlcnMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL2F1dGgvdHlwZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL2F1dGgvYWN0aW9ucy50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInJlcXVpcmUiLCJBcHBfMSIsIl9faW1wb3J0RGVmYXVsdCIsIkhvbWVQYWdlXzEiLCJVc2Vyc0xpc3RQYWdlXzEiLCJyb3V0ZXMiLCJwYXRoIiwiZXhhY3QiLCJGRVRDSF9VU0VSUyIsIl90aGlzIiwidGhpcyIsImV4cHJlc3NfMSIsInJlbmRlcmVyXzEiLCJjcmVhdGVTdG9yZV8xIiwicmVhY3Rfcm91dGVyX2NvbmZpZ18xIiwiUm91dGVzXzEiLCJleHByZXNzX2h0dHBfcHJveHlfMSIsImFwcCIsInVzZSIsInByb3h5UmVxT3B0RGVjb3JhdG9yIiwib3B0cyIsImhlYWRlcnMiLCJyZXEiLCJyZXMiLCJfX2F3YWl0ZXIiLCJzdG9yZSIsInByb21pc2VzIiwibWF0Y2hSb3V0ZXMiLCJtYXAiLCJfYSIsInJvdXRlIiwibG9hZERhdGEiLCJQcm9taXNlIiwiYWxsIiwic2VudCIsInNlbmQiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIiwicmVhY3RfMSIsInNlcnZlcl8xIiwicmVhY3Rfcm91dGVyX2RvbV8xIiwicmVhY3RfcmVkdXhfMSIsInNlcmlhbGl6ZV9qYXZhc2NyaXB0XzEiLCJyZW5kZXJUb1N0cmluZyIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsIlN0YXRpY1JvdXRlciIsImxvY2F0aW9uIiwiY29udGV4dCIsInJlbmRlclJvdXRlcyIsImdldFN0YXRlIiwiY29tcG9uZW50Iiwib25DbGljayIsIl9faW1wb3J0U3RhciIsImFjdGlvbnNfMSIsImRpc3BhdGNoIiwiZmV0Y2hVc2VycyIsImNvbm5lY3QiLCJzdGF0ZSIsInVzZXJzIiwicHJvcHMiLCJ1c2VFZmZlY3QiLCJ1c2VyIiwiaWQiLCJ0eXBlc18xIiwicmVxdWVzdCIsInR5cGUiLCJwYXlsb2FkIiwicmVkdXhfMSIsInJlZHV4X3RodW5rXzEiLCJheGlvc18xIiwic3RvcmVfMSIsImJhc2VVUkwiLCJjb29raWUiLCJjcmVhdGVTdG9yZSIsImFwcGx5TWlkZGxld2FyZSIsIndpdGhFeHRyYUFyZ3VtZW50IiwicmVkdWNlcnNfMSIsInJlZHVjZXJzXzIiLCJyZWR1Y2VycyIsImNvbWJpbmVSZWR1Y2VycyIsImF1dGgiLCJhY3Rpb24iLCJkYXRhIiwidmFsIiwiaHR0cCIsImh0dHBzIiwidXJsIiwiZ2V0UmF3Qm9keSIsImlzVW5zZXQiLCJyZXFIZWFkZXJzIiwib3B0aW9ucyIsInNraXBIZHJzIiwicHJlc2VydmVIb3N0SGRyIiwicHVzaCIsImhkcyIsIm9iaiIsInNvdXJjZSIsInNraXBzIiwicHJvcCIsImluZGV4T2YiLCJleHRlbmQiLCJjb25uZWN0aW9uIiwicmVxT3B0IiwibWV0aG9kIiwicGFyYW1zIiwicHJlc2VydmVSZXFTZXNzaW9uIiwic2Vzc2lvbiIsInJlc29sdmUiLCJib2R5Q29udGVudCIsInBhcnNlUmVxQm9keSIsImxpbWl0IiwiYm9keSIsImxlbmd0aCIsIm1heWJlUGFyc2VCb2R5IiwicGFyc2VIb3N0IiwiQ29udGFpbmVyIiwiaG9zdCIsInRvU3RyaW5nIiwiRXJyb3IiLCJ0ZXN0IiwicGFyc2VkIiwicGFyc2UiLCJob3N0bmFtZSIsImlzaHR0cHMiLCJwcm90b2NvbCIsInBvcnQiLCJidWZmZXIiLCJyZXQiLCJCdWZmZXIiLCJpc0J1ZmZlciIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXFCb2R5RW5jb2RpbmciLCJyZXFCb2R5RW5jb2RlaW5nIiwiYnVmZmVyT3JTdHJpbmciLCJTY29wZUNvbnRhaW5lciIsImFzc2VydCIsImRlYnVnIiwiYnVpbGRQcm94eVJlcSIsImNvcHlQcm94eVJlc0hlYWRlcnNUb1VzZXJSZXMiLCJkZWNvcmF0ZVByb3h5UmVxQm9keSIsImRlY29yYXRlUHJveHlSZXFPcHRzIiwiZGVjb3JhdGVVc2VyUmVzIiwiZGVjb3JhdGVVc2VyUmVzSGVhZGVycyIsImZpbHRlclVzZXJSZXF1ZXN0IiwiaGFuZGxlUHJveHlFcnJvcnMiLCJtYXliZVNraXBUb05leHRIYW5kbGVyIiwicHJlcGFyZVByb3h5UmVxIiwicmVzb2x2ZVByb3h5SG9zdCIsInJlc29sdmVQcm94eVJlcVBhdGgiLCJzZW5kUHJveHlSZXF1ZXN0Iiwic2VuZFVzZXJSZXMiLCJ1c2VyT3B0aW9ucyIsIm5leHQiLCJjb250YWluZXIiLCJ0aGVuIiwiY2F0Y2giLCJlcnIiLCJwcm94eUVycm9ySGFuZGxlciIsInJlc29sdmVPcHRpb25zIiwicHJveHkiLCJ1bmRlZmluZWQiLCJyZXNEYXRhIiwicmVxQnVpbGRlciIsInJlc29sdmVkIiwiZGVjb3JhdGVSZXF1ZXN0IiwiZm9yd2FyZFBhdGgiLCJmb3J3YXJkUGF0aEFzeW5jIiwid2FybiIsImludGVyY2VwdCIsInByb3h5UmVxUGF0aFJlc29sdmVyIiwicHJveHlSZXFCb2R5RGVjb3JhdG9yIiwidXNlclJlc0RlY29yYXRvciIsInVzZXJSZXNIZWFkZXJEZWNvcmF0b3IiLCJmaWx0ZXIiLCJtZW1vaXplSG9zdCIsInNraXBUb05leHRIYW5kbGVyRmlsdGVyIiwicmVxQXNCdWZmZXIiLCJ0aW1lb3V0Iiwic3RyZWFtIiwicmVxdWVzdE9wdGlvbnMiLCJwYXJzZUJvZHkiLCJjcmVhdGVSZXFPcHRpb25zIiwicmVzcG9uc2VBcnJheSIsInJzcCIsImhlYWRlcnNTZW50Iiwic3RhdHVzIiwic3RhdHVzQ29kZSIsImtleXMiLCJpdGVtIiwiZm9yRWFjaCIsInNldCIsImRlZmF1bHREZWNvcmF0b3IiLCJwcm94eVJlcU9wdEJvZHkiLCJ1c2VyRGVjb3JhdG9yIiwicmVzb2x2ZXJGbiIsInByb3h5UmVxT3B0QnVpbGRlciIsInByb2Nlc3NlZFJlcU9wdHMiLCJhcyIsInpsaWIiLCJ6aXBPclVuemlwIiwicnNwRGF0YSIsImlzUmVzR3ppcHBlZCIsIm1heWJlVW56aXBSZXNwb25zZSIsIm1heWJlWmlwUmVzcG9uc2UiLCJwcm94eVJlc0RhdGEiLCJwcm94eVJlcyIsIm1vZGlmaWVkUmVzRGF0YSIsInJlamVjdCIsInJzcGQiLCJ2ZXJpZnlCdWZmZXIiLCJyc3BkQmVmb3JlIiwicnNwZEFmdGVyIiwidXBkYXRlSGVhZGVycyIsIl9oZWFkZXJzIiwiZGVmYXVsdEZpbHRlciIsInVzZXJSZXEiLCJzaG91bGRJQ29udGludWUiLCJjb2RlIiwic2V0SGVhZGVyIiwid3JpdGVIZWFkIiwiQ29udGVudC1UeXBlIiwiZW5kIiwiY29ubmVjdGlvblJlc2V0SGFuZGxlciIsImRlZmF1bHRTa2lwRmlsdGVyIiwic2hvdWxkU2tpcFRvTmV4dCIsImV4cHJlc3NIdHRwUHJveHkiLCJyZXN1bHQiLCJieXRlTGVuZ3RoIiwicGFyc2VkSG9zdCIsIm1lbW9pemVkSG9zdCIsInJlcXVlc3RNb2R1bGUiLCJkZWZhdWx0UHJveHlSZXFQYXRoUmVzb2x2ZXIiLCJyZXNvbHZlZFBhdGgiLCJjaHVua0xlbmd0aCIsInByb3h5UmVxIiwiY2h1bmtzIiwib24iLCJjaHVuayIsImNvbmNhdCIsInNvY2tldCIsInNldFRpbWVvdXQiLCJhYm9ydCIsImNvbnRlbnRUeXBlIiwiZ2V0SGVhZGVyIiwiayIsImpvaW4iLCJlIiwid3JpdGUiLCJwaXBlIiwicmVkdWNlIiwibGVuIiwiYnVmIiwiSGVhZGVyXzEiLCJmZXRjaEN1cnJlbnRVc2VyIiwiYXV0aExpbmsiLCJocmVmIiwiTGlu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QUEsV0FDRU4sRUFBQSxRQUFBTSxjQUFDSixFQUFBME4sS0FBSSxDQUFDQyxHQUFHLFVBQVEsU0FDakI3TixFQUFBLFFBQUFNLGNBQUNKLEVBQUEwTixLQUFJLENBQUNDLEdBQUcsV0FBUyxVQUNqQkgscUZDeEJULElBQUFoTSxFQUFBckcsRUFBQSxJQVdBRSxFQUFBLFFBVG9CLFNBQUM2RixFQUFjd0IsR0FDakMsWUFEbUIsSUFBQXhCLE1BQUEsTUFDWHdCLEVBQU9oQixNQUNiLEtBQUtGLEVBQUFvTSxtQkFDSCxPQUFPbEwsRUFBT2YsUUFBUWdCLE9BQVEsRUFDaEMsUUFDRSxPQUFPekIsbUZDSEE3RixFQUFBdVMsbUJBQXFCLGk1Q0NKbEM1UCxFQUFBQyxzREFBQSxJQUFBdUQsRUFBQXJHLEVBQUEsSUFHYUUsRUFBQWtTLGlCQUFtQixXQUFNLGdCQUNwQ3hNLEVBQ0FMLEVBQ0FlLEdBQVksT0FBQTFDLEVBQUFmLE9BQUEsMkVBRUEsU0FBTXlELEVBQVFyRixJQUFJLGdDQUF4QjBDLEVBQU1NLEVBQUFLLE9BRVpzQixFQUFTLENBQUVXLEtBQU1GLEVBQUFvTSxtQkFBb0JqTSxRQUFTN0MiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDYpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3RcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3QtcmVkdXhcIik7IiwiaW1wb3J0IEFwcCBmcm9tIFwiLi4vQXBwXCI7XHJcbmltcG9ydCBIb21lUGFnZSBmcm9tIFwiLi4vcGFnZXMvSG9tZVBhZ2VcIjtcclxuaW1wb3J0IFVzZXJzTGlzdFBhZ2UgZnJvbSBcIi4uL3BhZ2VzL1VzZXJzTGlzdFBhZ2VcIjtcclxuaW1wb3J0IHsgUmVhY3ROb2RlIH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgdHlwZSBDb25maWdSb3V0ZSA9IHtcclxuICBwYXRoOiBzdHJpbmc7XHJcbiAgY29tcG9uZW50OiBSZWFjdE5vZGU7XHJcbiAgbG9hZERhdGE/OiAoKSA9PiB2b2lkO1xyXG4gIGV4YWN0PzogYm9vbGVhbjtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFtcclxuICB7XHJcbiAgICAuLi5BcHAsXHJcbiAgICByb3V0ZXM6IFtcclxuICAgICAge1xyXG4gICAgICAgIC4uLkhvbWVQYWdlLFxyXG4gICAgICAgIHBhdGg6IFwiL1wiLFxyXG4gICAgICAgIGV4YWN0OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICAuLi5Vc2Vyc0xpc3RQYWdlLFxyXG4gICAgICAgIHBhdGg6IFwiL3VzZXJzXCJcclxuICAgICAgfVxyXG4gICAgXVxyXG4gIH1cclxuXTtcclxuIiwiZXhwb3J0IGludGVyZmFjZSBVc2VyU3RhdGUge1xyXG4gIGRhdGE6IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEZFVENIX1VTRVJTID0gXCJGRVRDSF9VU0VSU1wiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBGZXRjaFVzZXJzQWN0aW9uIHtcclxuICB0eXBlOiB0eXBlb2YgRkVUQ0hfVVNFUlM7XHJcbiAgcGF5bG9hZDogVXNlclN0YXRlO1xyXG59XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0LXJvdXRlci1jb25maWdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVkdXhcIik7IiwiaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcclxuaW1wb3J0IHJlbmRlcmVyIGZyb20gXCIuL3JlbmRlcmVyXCI7XHJcbmltcG9ydCBjcmVhdGVTdG9yZSBmcm9tIFwiLi9zdG9yZS9jcmVhdGVTdG9yZVwiO1xyXG5pbXBvcnQgeyBtYXRjaFJvdXRlcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItY29uZmlnXCI7XHJcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uL3NyYy9yb3V0ZXMvUm91dGVzXCI7XHJcbmltcG9ydCBwcm94eSBmcm9tIFwiZXhwcmVzcy1odHRwLXByb3h5XCI7XHJcblxyXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XHJcblxyXG5hcHAudXNlKFxyXG4gIFwiL2FwaVwiLFxyXG4gIHByb3h5KFwiaHR0cDovL3JlYWN0LXNzci1hcGkuaGVyb2t1YXBwLmNvbVwiLCB7XHJcbiAgICBwcm94eVJlcU9wdERlY29yYXRvcjogb3B0cyA9PiB7XHJcbiAgICAgIGlmIChvcHRzLmhlYWRlcnMpIG9wdHMuaGVhZGVyc1tcIngtZm9yd2FyZGVkLWhvc3RcIl0gPSBcImxvY2FsaG9zdDozMDAwXCI7XHJcbiAgICAgIHJldHVybiBvcHRzO1xyXG4gICAgfVxyXG4gIH0pXHJcbik7XHJcbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMoXCJwdWJsaWNcIikpO1xyXG5hcHAuZ2V0KFwiKlwiLCBhc3luYyAocmVxLCByZXMpID0+IHtcclxuICBjb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKHJlcSk7XHJcblxyXG4gIGNvbnN0IHByb21pc2VzID0gbWF0Y2hSb3V0ZXMoUm91dGVzLCByZXEucGF0aCkubWFwKCh7IHJvdXRlIH0pID0+IHtcclxuICAgIHJldHVybiByb3V0ZS5sb2FkRGF0YSA/IHJvdXRlLmxvYWREYXRhKHN0b3JlKSA6IG51bGw7XHJcbiAgfSk7XHJcblxyXG4gIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcclxuXHJcbiAgcmVzLnNlbmQocmVuZGVyZXIocmVxLCBzdG9yZSkpO1xyXG59KTtcclxuXHJcbmFwcC5saXN0ZW4oMzAwMCwgKCkgPT4gY29uc29sZS5sb2coYGxpc3RlbmluZyBvbiBwb3J0IDMwMDBgKSk7XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImV4cHJlc3NcIik7IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyByZW5kZXJUb1N0cmluZyB9IGZyb20gXCJyZWFjdC1kb20vc2VydmVyXCI7XHJcbmltcG9ydCB7IFN0YXRpY1JvdXRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uL3NyYy9yb3V0ZXMvUm91dGVzXCI7XHJcbmltcG9ydCB7IHJlbmRlclJvdXRlcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItY29uZmlnXCI7XHJcbmltcG9ydCBzZXJpYWxpemUgZnJvbSBcInNlcmlhbGl6ZS1qYXZhc2NyaXB0XCI7XHJcblxyXG5mdW5jdGlvbiByZW5kZXJlcihyZXE6IGFueSwgc3RvcmU6IGFueSkge1xyXG4gIGNvbnN0IGNvbnRlbnQgPSByZW5kZXJUb1N0cmluZyhcclxuICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxyXG4gICAgICA8U3RhdGljUm91dGVyIGxvY2F0aW9uPXtyZXEucGF0aH0gY29udGV4dD17e319PlxyXG4gICAgICAgIDxkaXY+e3JlbmRlclJvdXRlcyhSb3V0ZXMpfTwvZGl2PlxyXG4gICAgICA8L1N0YXRpY1JvdXRlcj5cclxuICAgIDwvUHJvdmlkZXI+XHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIGBcclxuICA8aHRtbD5cclxuICAgIDxoZWFkPjwvaGVhZD5cclxuICAgICAgPGJvZHk+XHJcbiAgICAgICAgPGRpdiBpZD1cInJvb3RcIj4ke2NvbnRlbnR9PC9kaXY+XHJcbiAgICAgICAgICA8c2NyaXB0PlxyXG4gICAgICAgICAgICB3aW5kb3cuSU5JVElBTF9TVEFURSA9ICR7c2VyaWFsaXplKHN0b3JlLmdldFN0YXRlKCkpfVxyXG4gICAgICAgICAgPC9zY3JpcHQ+XHJcbiAgICAgICAgPHNjcmlwdCBzcmM9XCJidW5kbGUuanNcIj48L3NjcmlwdD5cclxuICAgICAgPC9ib2R5PlxyXG4gIDwvaHRtbD5cclxuICBgO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCByZW5kZXJlcjtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3QtZG9tL3NlcnZlclwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdC1yb3V0ZXItZG9tXCIpOyIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmZ1bmN0aW9uIEhvbWVQYWdlKCkge1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2PlxyXG4gICAgICA8aDE+SSBhbSBIb21lISEhPC9oMT5cclxuICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBjb25zb2xlLmxvZyhcInlvb29vXCIpfT5DbGljayBNZSE8L2J1dHRvbj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBjb21wb25lbnQ6IEhvbWVQYWdlXHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBBcHBTdGF0ZSB9IGZyb20gXCIuLi9zdG9yZVwiO1xyXG5pbXBvcnQgeyBmZXRjaFVzZXJzIH0gZnJvbSBcIi4uL3N0b3JlL3VzZXIvYWN0aW9uc1wiO1xyXG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gXCJyZWR1eFwiO1xyXG5cclxudHlwZSBQcm9wcyA9IHtcclxuICBmZXRjaFVzZXJzOiAoKSA9PiB2b2lkO1xyXG4gIHVzZXJzOiB7IGlkOiBzdHJpbmc7IG5hbWU6IHN0cmluZyB9W107XHJcbn07XHJcblxyXG5mdW5jdGlvbiBVc2Vyc0xpc3QocHJvcHM6IFByb3BzKSB7XHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHByb3BzLmZldGNoVXNlcnMoKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIGNvbnN0IHJlbmRlclVzZXJzID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIHByb3BzLnVzZXJzLm1hcCh1c2VyID0+IHtcclxuICAgICAgcmV0dXJuIDxsaSBrZXk9e3VzZXIuaWR9Pnt1c2VyLm5hbWV9PC9saT47XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdj5cclxuICAgICAgPHA+SGVyZSBpcyBhIGJpZyBsaXN0IG9mIHVzZXJzPC9wPlxyXG4gICAgICA8dWw+e3JlbmRlclVzZXJzKCl9PC91bD5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogQXBwU3RhdGUpID0+IHtcclxuICByZXR1cm4geyB1c2Vyczogc3RhdGUudXNlcnMgfTtcclxufTtcclxuXHJcbmNvbnN0IGxvYWREYXRhID0gKHN0b3JlOiBhbnkpID0+IHtcclxuICByZXR1cm4gc3RvcmUuZGlzcGF0Y2goZmV0Y2hVc2VycygpKTtcclxufTtcclxuXHJcbmV4cG9ydCB7IGxvYWREYXRhIH07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgbG9hZERhdGEsXHJcbiAgY29tcG9uZW50OiBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgeyBmZXRjaFVzZXJzIH1cclxuICApKFVzZXJzTGlzdClcclxufTtcclxuIiwiaW1wb3J0IHsgRGlzcGF0Y2ggfSBmcm9tIFwicmVkdXhcIjtcclxuaW1wb3J0IHsgRkVUQ0hfVVNFUlMgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoVXNlcnMgPSAoKSA9PiBhc3luYyAoXHJcbiAgZGlzcGF0Y2g6IERpc3BhdGNoLFxyXG4gIGdldFN0YXRlOiBhbnksXHJcbiAgcmVxdWVzdDogYW55XHJcbikgPT4ge1xyXG4gIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3QuZ2V0KFwiL3VzZXJzXCIpO1xyXG5cclxuICBkaXNwYXRjaCh7IHR5cGU6IEZFVENIX1VTRVJTLCBwYXlsb2FkOiByZXMgfSk7XHJcbn07XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImF4aW9zXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInNlcmlhbGl6ZS1qYXZhc2NyaXB0XCIpOyIsImltcG9ydCB7IGNyZWF0ZVN0b3JlLCBhcHBseU1pZGRsZXdhcmUgfSBmcm9tIFwicmVkdXhcIjtcclxuaW1wb3J0IHRodW5rIGZyb20gXCJyZWR1eC10aHVua1wiO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XHJcbmltcG9ydCByZWR1Y2VycyBmcm9tIFwiLi4vLi4vc3JjL3N0b3JlXCI7XHJcbmltcG9ydCB7IFJlcXVlc3QgfSBmcm9tIFwiZXhwcmVzc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKHJlcTogUmVxdWVzdCkgPT4ge1xyXG4gIGNvbnN0IHJlcXVlc3QgPSBheGlvcy5jcmVhdGUoe1xyXG4gICAgYmFzZVVSTDogXCJodHRwOi8vcmVhY3Qtc3NyLWFwaS5oZXJva3VhcHAuY29tXCIsXHJcbiAgICBoZWFkZXJzOiB7IGNvb2tpZTogcmVxLmdldChcImNvb2tpZVwiKSB8fCBcIlwiIH1cclxuICB9KTtcclxuXHJcbiAgY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShcclxuICAgIHJlZHVjZXJzLFxyXG4gICAge30sXHJcbiAgICBhcHBseU1pZGRsZXdhcmUodGh1bmsud2l0aEV4dHJhQXJndW1lbnQocmVxdWVzdCkpXHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIHN0b3JlO1xyXG59O1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWR1eC10aHVua1wiKTsiLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tIFwicmVkdXhcIjtcclxuaW1wb3J0IHVzZXJzUmVkdWNlciBmcm9tIFwiLi91c2VyL3JlZHVjZXJzXCI7XHJcbmltcG9ydCBhdXRoUmVkdWNlciBmcm9tIFwiLi9hdXRoL3JlZHVjZXJzXCI7XHJcblxyXG5jb25zdCByZWR1Y2VycyA9IGNvbWJpbmVSZWR1Y2Vycyh7XHJcbiAgdXNlcnM6IHVzZXJzUmVkdWNlcixcclxuICBhdXRoOiBhdXRoUmVkdWNlclxyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJlZHVjZXJzO1xyXG5cclxuZXhwb3J0IHR5cGUgQXBwU3RhdGUgPSBSZXR1cm5UeXBlPHR5cGVvZiByZWR1Y2Vycz47XHJcbiIsImltcG9ydCB7IEZldGNoVXNlcnNBY3Rpb24sIEZFVENIX1VTRVJTIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmNvbnN0IHVzZXJzUmVkdWNlciA9IChzdGF0ZSA9IFtdLCBhY3Rpb246IEZldGNoVXNlcnNBY3Rpb24pID0+IHtcclxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICBjYXNlIEZFVENIX1VTRVJTOlxyXG4gICAgICByZXR1cm4gYWN0aW9uLnBheWxvYWQuZGF0YTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBzdGF0ZTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB1c2Vyc1JlZHVjZXI7XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImRlYnVnXCIpOyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIHZhbCAgPT09ICAndW5kZWZpbmVkJyB8fCB2YWwgPT09ICcnIHx8IHZhbCA9PT0gbnVsbCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG52YXIgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpO1xudmFyIHVybCA9IHJlcXVpcmUoJ3VybCcpO1xudmFyIGdldFJhd0JvZHkgPSByZXF1aXJlKCdyYXctYm9keScpO1xudmFyIGlzVW5zZXQgPSByZXF1aXJlKCcuL2lzVW5zZXQnKTtcblxuZnVuY3Rpb24gZXh0ZW5kKG9iaiwgc291cmNlLCBza2lwcykge1xuXG4gIGlmICghc291cmNlKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG4gICAgaWYgKCFza2lwcyB8fCBza2lwcy5pbmRleE9mKHByb3ApID09PSAtMSkge1xuICAgICAgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSG9zdChDb250YWluZXIpIHtcbiAgdmFyIGhvc3QgPSBDb250YWluZXIucGFyYW1zLmhvc3Q7XG4gIHZhciByZXEgPSAgQ29udGFpbmVyLnVzZXIucmVxO1xuICB2YXIgb3B0aW9ucyA9IENvbnRhaW5lci5vcHRpb25zO1xuICBob3N0ID0gKHR5cGVvZiBob3N0ID09PSAnZnVuY3Rpb24nKSA/IGhvc3QocmVxKSA6IGhvc3QudG9TdHJpbmcoKTtcblxuICBpZiAoIWhvc3QpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdFbXB0eSBob3N0IHBhcmFtZXRlcicpO1xuICB9XG5cbiAgaWYgKCEvaHR0cChzKT86XFwvXFwvLy50ZXN0KGhvc3QpKSB7XG4gICAgaG9zdCA9ICdodHRwOi8vJyArIGhvc3Q7XG4gIH1cblxuICB2YXIgcGFyc2VkID0gdXJsLnBhcnNlKGhvc3QpO1xuXG4gIGlmICghcGFyc2VkLmhvc3RuYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcignVW5hYmxlIHRvIHBhcnNlIGhvc3RuYW1lLCBwb3NzaWJseSBtaXNzaW5nIHByb3RvY29sOi8vPycpO1xuICB9XG5cbiAgdmFyIGlzaHR0cHMgPSBvcHRpb25zLmh0dHBzIHx8IHBhcnNlZC5wcm90b2NvbCA9PT0gJ2h0dHBzOic7XG5cbiAgcmV0dXJuIHtcbiAgICBob3N0OiBwYXJzZWQuaG9zdG5hbWUsXG4gICAgcG9ydDogcGFyc2VkLnBvcnQgfHwgKGlzaHR0cHMgPyA0NDMgOiA4MCksXG4gICAgbW9kdWxlOiBpc2h0dHBzID8gaHR0cHMgOiBodHRwLFxuICB9O1xufVxuXG5mdW5jdGlvbiByZXFIZWFkZXJzKHJlcSwgb3B0aW9ucykge1xuXG5cbiAgdmFyIGhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnMgfHwge307XG5cbiAgdmFyIHNraXBIZHJzID0gWyAnY29ubmVjdGlvbicsICdjb250ZW50LWxlbmd0aCcgXTtcbiAgaWYgKCFvcHRpb25zLnByZXNlcnZlSG9zdEhkcikge1xuICAgIHNraXBIZHJzLnB1c2goJ2hvc3QnKTtcbiAgfVxuICB2YXIgaGRzID0gZXh0ZW5kKGhlYWRlcnMsIHJlcS5oZWFkZXJzLCBza2lwSGRycyk7XG4gIGhkcy5jb25uZWN0aW9uID0gJ2Nsb3NlJztcblxuICByZXR1cm4gaGRzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZXF1ZXN0T3B0aW9ucyhyZXEsIHJlcywgb3B0aW9ucykge1xuXG4gIC8vIHByZXBhcmUgcHJveHlSZXF1ZXN0XG5cbiAgdmFyIHJlcU9wdCA9IHtcbiAgICBoZWFkZXJzOiByZXFIZWFkZXJzKHJlcSwgb3B0aW9ucyksXG4gICAgbWV0aG9kOiByZXEubWV0aG9kLFxuICAgIHBhdGg6IHJlcS5wYXRoLFxuICAgIHBhcmFtczogcmVxLnBhcmFtcyxcbiAgfTtcblxuICBpZiAob3B0aW9ucy5wcmVzZXJ2ZVJlcVNlc3Npb24pIHtcbiAgICByZXFPcHQuc2Vzc2lvbiA9IHJlcS5zZXNzaW9uO1xuICB9XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXFPcHQpO1xufVxuXG4vLyBleHRyYWN0IHRvIGJvZHlDb250ZW50IG9iamVjdFxuXG5mdW5jdGlvbiBib2R5Q29udGVudChyZXEsIHJlcywgb3B0aW9ucykge1xuICB2YXIgcGFyc2VSZXFCb2R5ID0gaXNVbnNldChvcHRpb25zLnBhcnNlUmVxQm9keSkgPyB0cnVlIDogb3B0aW9ucy5wYXJzZVJlcUJvZHk7XG5cbiAgZnVuY3Rpb24gbWF5YmVQYXJzZUJvZHkocmVxLCBsaW1pdCkge1xuICAgIGlmIChyZXEuYm9keSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXEuYm9keSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIHNwZWNpZmllZCBhbmQgZ2xvYmFsIFByb21pc2UgZXhpc3RzLlxuXG4gICAgICByZXR1cm4gZ2V0UmF3Qm9keShyZXEsIHtcbiAgICAgICAgbGVuZ3RoOiByZXEuaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSxcbiAgICAgICAgbGltaXQ6IGxpbWl0LFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHBhcnNlUmVxQm9keSkge1xuICAgIHJldHVybiBtYXliZVBhcnNlQm9keShyZXEsIG9wdGlvbnMubGltaXQpO1xuICB9XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZTogY3JlYXRlUmVxdWVzdE9wdGlvbnMsXG4gIGJvZHlDb250ZW50OiBib2R5Q29udGVudCxcbiAgcGFyc2VIb3N0OiBwYXJzZUhvc3Rcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ1cmxcIik7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKlxuICogVHJpdmlhbCBjb252ZW5pZW5jZSBtZXRob2RzIGZvciBwYXJzaW5nIEJ1ZmZlcnNcbiAqL1xuXG5mdW5jdGlvbiBhc0J1ZmZlcihib2R5LCBvcHRpb25zKSB7XG5cbiAgdmFyIHJldDtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihib2R5KSkge1xuICAgIHJldCA9IGJvZHk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0ID0gbmV3IEJ1ZmZlcihKU09OLnN0cmluZ2lmeShib2R5KSwgb3B0aW9ucy5yZXFCb2R5RW5jb2RpbmcpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgIHJldCA9IG5ldyBCdWZmZXIoYm9keSwgb3B0aW9ucy5yZXFCb2R5RW5jb2RlaW5nKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBhc0J1ZmZlck9yU3RyaW5nKGJvZHkpIHtcblxuICB2YXIgcmV0O1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGJvZHkpKSB7XG4gICAgcmV0ID0gYm9keTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ29iamVjdCcpIHtcbiAgICByZXQgPSBKU09OLnN0cmluZ2lmeShib2R5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXQgPSBib2R5O1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBidWZmZXI6IGFzQnVmZmVyLFxuICBidWZmZXJPclN0cmluZzogYXNCdWZmZXJPclN0cmluZ1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKiBCcmVha3MgcHJveHlpbmcgaW50byBhIHNlcmllcyBvZiBkaXNjcmV0ZSBzdGVwcywgbWFueSBvZiB3aGljaCBjYW4gYmUgc3dhcHBlZCBvdXQgYnkgYXV0aG9ycy5cbi8vICogVXNlcyBQcm9taXNlcyB0byBzdXBwb3J0IGFzeW5jLlxuLy8gKiBVc2VzIGEgcXVhc2ktR2xvYmFsIGNhbGxlZCBDb250YWluZXIgdG8gdGlkeSB1cCB0aGUgYXJndW1lbnQgcGFzc2luZyBiZXR3ZWVuIHRoZSBtYWpvciB3b3JrLWZsb3cgc3RlcHMuXG5cbnZhciBTY29wZUNvbnRhaW5lciA9IHJlcXVpcmUoJy4vbGliL3Njb3BlQ29udGFpbmVyJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdleHByZXNzLWh0dHAtcHJveHknKTtcblxudmFyIGJ1aWxkUHJveHlSZXEgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL2FwcC9zdGVwcy9idWlsZFByb3h5UmVxJyk7XG52YXIgY29weVByb3h5UmVzSGVhZGVyc1RvVXNlclJlcyA9IHJlcXVpcmUoJy4vYXBwL3N0ZXBzL2NvcHlQcm94eVJlc0hlYWRlcnNUb1VzZXJSZXMnKTtcbnZhciBkZWNvcmF0ZVByb3h5UmVxQm9keSAgICAgICAgID0gcmVxdWlyZSgnLi9hcHAvc3RlcHMvZGVjb3JhdGVQcm94eVJlcUJvZHknKTtcbnZhciBkZWNvcmF0ZVByb3h5UmVxT3B0cyAgICAgICAgID0gcmVxdWlyZSgnLi9hcHAvc3RlcHMvZGVjb3JhdGVQcm94eVJlcU9wdHMnKTtcbnZhciBkZWNvcmF0ZVVzZXJSZXMgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9hcHAvc3RlcHMvZGVjb3JhdGVVc2VyUmVzJyk7XG52YXIgZGVjb3JhdGVVc2VyUmVzSGVhZGVycyAgICAgICA9IHJlcXVpcmUoJy4vYXBwL3N0ZXBzL2RlY29yYXRlVXNlclJlc0hlYWRlcnMnKTtcbnZhciBmaWx0ZXJVc2VyUmVxdWVzdCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9hcHAvc3RlcHMvZmlsdGVyVXNlclJlcXVlc3QnKTtcbnZhciBoYW5kbGVQcm94eUVycm9ycyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9hcHAvc3RlcHMvaGFuZGxlUHJveHlFcnJvcnMnKTtcbnZhciBtYXliZVNraXBUb05leHRIYW5kbGVyICAgICAgID0gcmVxdWlyZSgnLi9hcHAvc3RlcHMvbWF5YmVTa2lwVG9OZXh0SGFuZGxlcicpO1xudmFyIHByZXBhcmVQcm94eVJlcSAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL2FwcC9zdGVwcy9wcmVwYXJlUHJveHlSZXEnKTtcbnZhciByZXNvbHZlUHJveHlIb3N0ICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9hcHAvc3RlcHMvcmVzb2x2ZVByb3h5SG9zdCcpO1xudmFyIHJlc29sdmVQcm94eVJlcVBhdGggICAgICAgICAgPSByZXF1aXJlKCcuL2FwcC9zdGVwcy9yZXNvbHZlUHJveHlSZXFQYXRoJyk7XG52YXIgc2VuZFByb3h5UmVxdWVzdCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vYXBwL3N0ZXBzL3NlbmRQcm94eVJlcXVlc3QnKTtcbnZhciBzZW5kVXNlclJlcyAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9hcHAvc3RlcHMvc2VuZFVzZXJSZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwcm94eShob3N0LCB1c2VyT3B0aW9ucykge1xuICBhc3NlcnQoaG9zdCwgJ0hvc3Qgc2hvdWxkIG5vdCBiZSBlbXB0eScpO1xuXG4gIHJldHVybiBmdW5jdGlvbiBoYW5kbGVQcm94eShyZXEsIHJlcywgbmV4dCkge1xuICAgIGRlYnVnKCdbc3RhcnQgcHJveHldICcgKyByZXEucGF0aCk7XG4gICAgdmFyIGNvbnRhaW5lciA9IG5ldyBTY29wZUNvbnRhaW5lcihyZXEsIHJlcywgbmV4dCwgaG9zdCwgdXNlck9wdGlvbnMpO1xuXG4gICAgZmlsdGVyVXNlclJlcXVlc3QoY29udGFpbmVyKVxuICAgICAgLnRoZW4oYnVpbGRQcm94eVJlcSlcbiAgICAgIC50aGVuKHJlc29sdmVQcm94eUhvc3QpXG4gICAgICAudGhlbihkZWNvcmF0ZVByb3h5UmVxT3B0cylcbiAgICAgIC50aGVuKHJlc29sdmVQcm94eVJlcVBhdGgpXG4gICAgICAudGhlbihkZWNvcmF0ZVByb3h5UmVxQm9keSlcbiAgICAgIC50aGVuKHByZXBhcmVQcm94eVJlcSlcbiAgICAgIC50aGVuKHNlbmRQcm94eVJlcXVlc3QpXG4gICAgICAudGhlbihtYXliZVNraXBUb05leHRIYW5kbGVyKVxuICAgICAgLnRoZW4oY29weVByb3h5UmVzSGVhZGVyc1RvVXNlclJlcylcbiAgICAgIC50aGVuKGRlY29yYXRlVXNlclJlc0hlYWRlcnMpXG4gICAgICAudGhlbihkZWNvcmF0ZVVzZXJSZXMpXG4gICAgICAudGhlbihzZW5kVXNlclJlcylcbiAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIC8vIEkgc29tZXRpbWVzIHJlamVjdCB3aXRob3V0IGFuIGVycm9yIHRvIHNob3J0Y2lyY3VpdCB0aGUgcmVtYWluaW5nXG4gICAgICAgIC8vIHN0ZXBzIGFuZCByZXR1cm4gY29udHJvbCB0byB0aGUgaG9zdCBhcHBsaWNhdGlvbi5cblxuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgdmFyIHJlc29sdmVyID0gKGNvbnRhaW5lci5vcHRpb25zLnByb3h5RXJyb3JIYW5kbGVyKSA/XG4gICAgICAgICAgICBjb250YWluZXIub3B0aW9ucy5wcm94eUVycm9ySGFuZGxlciA6XG4gICAgICAgICAgICBoYW5kbGVQcm94eUVycm9ycztcbiAgICAgICAgICByZXNvbHZlcihlcnIsIHJlcywgbmV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfTtcbn07XG5cbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZXNvbHZlT3B0aW9ucyA9IHJlcXVpcmUoJy4uL2xpYi9yZXNvbHZlT3B0aW9ucycpO1xuXG4vLyBUaGUgQ29udGFpbmVyIG9iamVjdCBpcyBwYXNzZWQgZG93biB0aGUgY2hhaW4gb2YgUHJvbWlzZXMsIHdpdGggZWFjaCBvbmVcbi8vIG9mIHRoZW0gbXV0YXRpbmcgYW5kIHJldHVybmluZyBDb250YWluZXIuICBUaGUgZ29hbCBpcyB0aGF0IChldmVudHVhbGx5KVxuLy8gYXV0aG9yIHVzaW5nIHRoaXMgbGlicmFyeSAvLyBjb3VsZCBob29rIGludG8vb3ZlcnJpZGUgYW55IG9mIHRoZXNlXG4vLyB3b3JrZmxvdyBzdGVwcyB3aXRoIGEgUHJvbWlzZSBvciBzaW1wbGUgZnVuY3Rpb24uXG4vLyBDb250YWluZXIgZm9yIHNjb3BlZCBhcmd1bWVudHMgaW4gYSBwcm9taXNlIGNoYWluLiAgRWFjaCBwcm9taXNlIHJlY2lldmVzXG4vLyB0aGlzIGFzIGl0cyBhcmd1bWVudCwgYW5kIHJldHVybnMgaXQuXG4vL1xuLy8gRG8gbm90IGV4cG9zZSB0aGUgZGV0YWlscyBvZiB0aGlzIHRvIGhvb2tzL3VzZXIgZnVuY3Rpb25zLlxuXG5mdW5jdGlvbiBDb250YWluZXIocmVxLCByZXMsIG5leHQsIGhvc3QsIHVzZXJPcHRpb25zKSB7XG4gIHJldHVybiB7XG4gICAgdXNlcjoge1xuICAgICAgcmVxOiByZXEsXG4gICAgICByZXM6IHJlcyxcbiAgICAgIG5leHQ6IG5leHQsXG4gICAgfSxcbiAgICBwcm94eToge1xuICAgICAgcmVxOiB1bmRlZmluZWQsXG4gICAgICByZXM6IHVuZGVmaW5lZCxcbiAgICAgIHJlc0RhdGE6IHVuZGVmaW5lZCwgLy8gZnJvbSBwcm94eSByZXNcbiAgICAgIGJvZHlDb250ZW50OiB1bmRlZmluZWQsIC8vIGZvciBwcm94eSByZXFcbiAgICAgIHJlcUJ1aWxkZXI6IHt9LCAgLy8gcmVxT3B0LCBpbnRlbmRlZCBhcyBmaXJzdCBhcmcgdG8gaHR0cChzKT8ucmVxdWVzdFxuICAgIH0sXG4gICAgb3B0aW9uczogcmVzb2x2ZU9wdGlvbnModXNlck9wdGlvbnMpLFxuICAgIHBhcmFtczoge1xuICAgICAgaG9zdDogaG9zdCxcbiAgICAgIHVzZXJPcHRpb25zOiB1c2VyT3B0aW9uc1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb250YWluZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2V4cHJlc3MtaHR0cC1wcm94eScpO1xuXG52YXIgaXNVbnNldCA9IHJlcXVpcmUoJy4uL2xpYi9pc1Vuc2V0Jyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVCb2R5RW5jb2RpbmcocmVxQm9keUVuY29kaW5nKSB7XG5cbiAgLyogRm9yIHJlcUJvZHlFbmNvZGluZywgdGhlc2UgaXMgYSBtZWFuaW5nZnVsIGRpZmZlcmVuY2UgYmV0d2VlbiBudWxsIGFuZFxuICAgICogdW5kZWZpbmVkLiAgbnVsbCBzaG91bGQgYmUgcGFzc2VkIGZvcndhcmQgYXMgdGhlIHZhbHVlIG9mIHJlcUJvZHlFbmNvZGluZyxcbiAgICAqIGFuZCB1bmRlZmluZWQgc2hvdWxkIHJlc3VsdCBpbiB1dGYtOC5cbiAgICAqL1xuICByZXR1cm4gcmVxQm9keUVuY29kaW5nICE9PSB1bmRlZmluZWQgPyByZXFCb2R5RW5jb2RpbmcgOiAndXRmLTgnO1xufVxuXG4vLyBwYXJzZSBjbGllbnQgYXJndW1lbnRzXG5cbmZ1bmN0aW9uIHJlc29sdmVPcHRpb25zKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciByZXNvbHZlZDtcblxuICBpZiAob3B0aW9ucy5kZWNvcmF0ZVJlcXVlc3QpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnZGVjb3JhdGVSZXF1ZXN0IGlzIFJFTU9WRUQ7IHVzZSBwcm94eVJlcU9wdERlY29yYXRvciBhbmQnICtcbiAgICAgICdwcm94eVJlcUJvZHlEZWNvcmF0b3IgaW5zdGVhZC4gIHNlZSBSRUFETUUubWQnXG4gICAgKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmZvcndhcmRQYXRoIHx8IG9wdGlvbnMuZm9yd2FyZFBhdGhBc3luYykge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdmb3J3YXJkUGF0aCBhbmQgZm9yd2FyZFBhdGhBc3luYyBhcmUgREVQUkVDQVRFRCcgK1xuICAgICAgJ2FuZCBzaG91bGQgYmUgcmVwbGFjZWQgd2l0aCBwcm94eVJlcVBhdGhSZXNvbHZlcidcbiAgICApO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaW50ZXJjZXB0KSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ0RFUFJFQ0FURUQ6IGludGVyY2VwdC4gVXNlIGRlY29yYXRlVXNlUmVzIGluc3RlYWQuJyArXG4gICAgICAnIFBsZWFzZSBzZWUgUkVBRE1FIGZvciBtb3JlIGluZm9ybWF0aW9uLidcbiAgICApO1xuICB9XG5cbiAgcmVzb2x2ZWQgPSB7XG4gICAgbGltaXQ6IG9wdGlvbnMubGltaXQgfHwgJzFtYicsXG4gICAgcHJveHlSZXFQYXRoUmVzb2x2ZXI6IG9wdGlvbnMucHJveHlSZXFQYXRoUmVzb2x2ZXJcbiAgICAgICAgfHwgb3B0aW9ucy5mb3J3YXJkUGF0aEFzeW5jXG4gICAgICAgIHx8IG9wdGlvbnMuZm9yd2FyZFBhdGgsXG4gICAgcHJveHlSZXFPcHREZWNvcmF0b3I6IG9wdGlvbnMucHJveHlSZXFPcHREZWNvcmF0b3IsXG4gICAgcHJveHlSZXFCb2R5RGVjb3JhdG9yOiBvcHRpb25zLnByb3h5UmVxQm9keURlY29yYXRvcixcbiAgICB1c2VyUmVzRGVjb3JhdG9yOiBvcHRpb25zLnVzZXJSZXNEZWNvcmF0b3IgfHwgb3B0aW9ucy5pbnRlcmNlcHQsXG4gICAgdXNlclJlc0hlYWRlckRlY29yYXRvcjogb3B0aW9ucy51c2VyUmVzSGVhZGVyRGVjb3JhdG9yLFxuICAgIHByb3h5RXJyb3JIYW5kbGVyOiBvcHRpb25zLnByb3h5RXJyb3JIYW5kbGVyLFxuICAgIGZpbHRlcjogb3B0aW9ucy5maWx0ZXIsXG4gICAgLy8gRm9yIGJhY2t3YXJkcyBjb21wYXRhYmlsaXR5LCB3ZSBkZWZhdWx0IHRvIGxlZ2FjeSBiZWhhdmlvciBmb3IgbmV3bHkgYWRkZWQgc2V0dGluZ3MuXG5cbiAgICBwYXJzZVJlcUJvZHk6IGlzVW5zZXQob3B0aW9ucy5wYXJzZVJlcUJvZHkpID8gdHJ1ZSA6IG9wdGlvbnMucGFyc2VSZXFCb2R5LFxuICAgIHByZXNlcnZlSG9zdEhkcjogb3B0aW9ucy5wcmVzZXJ2ZUhvc3RIZHIsXG4gICAgbWVtb2l6ZUhvc3Q6IGlzVW5zZXQob3B0aW9ucy5tZW1vaXplSG9zdCkgPyB0cnVlIDogb3B0aW9ucy5tZW1vaXplSG9zdCxcbiAgICByZXFCb2R5RW5jb2Rpbmc6IHJlc29sdmVCb2R5RW5jb2Rpbmcob3B0aW9ucy5yZXFCb2R5RW5jb2RpbmcpLFxuICAgIHNraXBUb05leHRIYW5kbGVyRmlsdGVyOiBvcHRpb25zLnNraXBUb05leHRIYW5kbGVyRmlsdGVyLFxuICAgIGhlYWRlcnM6IG9wdGlvbnMuaGVhZGVycyxcbiAgICBwcmVzZXJ2ZVJlcVNlc3Npb246IG9wdGlvbnMucHJlc2VydmVSZXFTZXNzaW9uLFxuICAgIGh0dHBzOiBvcHRpb25zLmh0dHBzLFxuICAgIHBvcnQ6IG9wdGlvbnMucG9ydCxcbiAgICByZXFBc0J1ZmZlcjogb3B0aW9ucy5yZXFBc0J1ZmZlcixcbiAgICB0aW1lb3V0OiBvcHRpb25zLnRpbWVvdXRcbiAgfTtcblxuICAvLyBhdXRvbWF0aWNhbGx5IG9wdCBpbnRvIHN0cmVhbSBtb2RlIGlmIG5vIHJlc3BvbnNlIG1vZGlmaWVycyBhcmUgc3BlY2lmaWVkXG5cbiAgcmVzb2x2ZWQuc3RyZWFtID0gIXJlc29sdmVkLnNraXBUb05leHRIYW5kbGVyRmlsdGVyICYmXG4gICAgICAgICAgICAgICAgICAgICFyZXNvbHZlZC51c2VyUmVzRGVjb3JhdG9yICYmXG4gICAgICAgICAgICAgICAgICAgICFyZXNvbHZlZC51c2VyUmVzSGVhZGVyRGVjb3JhdG9yO1xuXG4gIGRlYnVnKHJlc29sdmVkKTtcbiAgcmV0dXJuIHJlc29sdmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlc29sdmVPcHRpb25zO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYXNzZXJ0XCIpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZXhwcmVzcy1odHRwLXByb3h5Jyk7XG52YXIgcmVxdWVzdE9wdGlvbnMgPSByZXF1aXJlKCcuLi8uLi9saWIvcmVxdWVzdE9wdGlvbnMnKTtcblxuZnVuY3Rpb24gYnVpbGRQcm94eVJlcShDb250YWluZXIpIHtcbiAgdmFyIHJlcSA9IENvbnRhaW5lci51c2VyLnJlcTtcbiAgdmFyIHJlcyA9IENvbnRhaW5lci51c2VyLnJlcztcbiAgdmFyIG9wdGlvbnMgPSBDb250YWluZXIub3B0aW9ucztcbiAgdmFyIGhvc3QgPSBDb250YWluZXIucHJveHkuaG9zdDtcblxuICB2YXIgcGFyc2VCb2R5ID0gKCFvcHRpb25zLnBhcnNlUmVxQm9keSkgPyBQcm9taXNlLnJlc29sdmUobnVsbCkgOiByZXF1ZXN0T3B0aW9ucy5ib2R5Q29udGVudChyZXEsIHJlcywgb3B0aW9ucyk7XG4gIHZhciBjcmVhdGVSZXFPcHRpb25zID0gcmVxdWVzdE9wdGlvbnMuY3JlYXRlKHJlcSwgcmVzLCBvcHRpb25zLCBob3N0KTtcblxuICByZXR1cm4gUHJvbWlzZVxuICAgIC5hbGwoW3BhcnNlQm9keSwgY3JlYXRlUmVxT3B0aW9uc10pXG4gICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2VBcnJheSkge1xuICAgICAgQ29udGFpbmVyLnByb3h5LmJvZHlDb250ZW50ID0gcmVzcG9uc2VBcnJheVswXTtcbiAgICAgIENvbnRhaW5lci5wcm94eS5yZXFCdWlsZGVyID0gcmVzcG9uc2VBcnJheVsxXTtcbiAgICAgIGRlYnVnKCdwcm94eSByZXF1ZXN0IG9wdGlvbnM6JywgQ29udGFpbmVyLnByb3h5LnJlcUJ1aWxkZXIpO1xuICAgICAgcmV0dXJuIENvbnRhaW5lcjtcbiAgICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidWlsZFByb3h5UmVxO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiaHR0cFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJodHRwc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyYXctYm9keVwiKTsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNvcHlQcm94eVJlc0hlYWRlcnNUb1VzZXJSZXMoY29udGFpbmVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgdmFyIHJlcyA9IGNvbnRhaW5lci51c2VyLnJlcztcbiAgICB2YXIgcnNwID0gY29udGFpbmVyLnByb3h5LnJlcztcblxuICAgIGlmICghcmVzLmhlYWRlcnNTZW50KSB7XG4gICAgICAgIHJlcy5zdGF0dXMocnNwLnN0YXR1c0NvZGUpO1xuICAgICAgICBPYmplY3Qua2V5cyhyc3AuaGVhZGVycylcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7IHJldHVybiBpdGVtICE9PSAndHJhbnNmZXItZW5jb2RpbmcnOyB9KVxuICAgICAgICAuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICByZXMuc2V0KGl0ZW0sIHJzcC5oZWFkZXJzW2l0ZW1dKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVzb2x2ZShjb250YWluZXIpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5UHJveHlSZXNIZWFkZXJzVG9Vc2VyUmVzO1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2V4cHJlc3MtaHR0cC1wcm94eScpO1xuXG5mdW5jdGlvbiBkZWZhdWx0RGVjb3JhdG9yKHByb3h5UmVxT3B0Qm9keS8qLCB1c2VyUmVxICovKSB7XG4gIHJldHVybiBwcm94eVJlcU9wdEJvZHk7XG59XG5cbmZ1bmN0aW9uIGRlY29yYXRlUHJveHlSZXFCb2R5KGNvbnRhaW5lcikge1xuICB2YXIgdXNlckRlY29yYXRvciA9IGNvbnRhaW5lci5vcHRpb25zLnByb3h5UmVxQm9keURlY29yYXRvcjtcbiAgdmFyIHJlc29sdmVyRm4gPSB1c2VyRGVjb3JhdG9yIHx8IGRlZmF1bHREZWNvcmF0b3I7XG5cbiAgaWYgKHVzZXJEZWNvcmF0b3IpIHtcbiAgICBkZWJ1ZygndXNpbmcgY3VzdG9tIHByb3h5UmVxQm9keURlY29yYXRvcicpO1xuICB9XG5cbiAgcmV0dXJuIFByb21pc2VcbiAgICAucmVzb2x2ZShyZXNvbHZlckZuKGNvbnRhaW5lci5wcm94eS5ib2R5Q29udGVudCwgY29udGFpbmVyLnVzZXIucmVxKSlcbiAgICAudGhlbihmdW5jdGlvbihib2R5Q29udGVudCkge1xuICAgICAgY29udGFpbmVyLnByb3h5LmJvZHlDb250ZW50ID0gYm9keUNvbnRlbnQ7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNvbnRhaW5lcik7XG4gICAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVjb3JhdGVQcm94eVJlcUJvZHk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2V4cHJlc3MtaHR0cC1wcm94eScpO1xuXG5mdW5jdGlvbiBkZWZhdWx0RGVjb3JhdG9yKHByb3h5UmVxT3B0QnVpbGRlciAvKiwgdXNlclJlcSAqLykge1xuICByZXR1cm4gcHJveHlSZXFPcHRCdWlsZGVyO1xufVxuXG5mdW5jdGlvbiBkZWNvcmF0ZVByb3h5UmVxT3B0KGNvbnRhaW5lcikge1xuICB2YXIgcmVzb2x2ZXJGbiA9IGNvbnRhaW5lci5vcHRpb25zLnByb3h5UmVxT3B0RGVjb3JhdG9yIHx8IGRlZmF1bHREZWNvcmF0b3I7XG5cbiAgcmV0dXJuIFByb21pc2VcbiAgICAucmVzb2x2ZShyZXNvbHZlckZuKGNvbnRhaW5lci5wcm94eS5yZXFCdWlsZGVyLCBjb250YWluZXIudXNlci5yZXEpKVxuICAgIC50aGVuKGZ1bmN0aW9uIChwcm9jZXNzZWRSZXFPcHRzKSB7XG4gICAgICBkZWxldGUgcHJvY2Vzc2VkUmVxT3B0cy5wYXJhbXM7XG4gICAgICBjb250YWluZXIucHJveHkucmVxQnVpbGRlciA9IHByb2Nlc3NlZFJlcU9wdHM7XG4gICAgICBkZWJ1ZygnUmVxdWVzdCBvcHRpb25zIChhZnRlciBwcm9jZXNzaW5nKTogJW8nLCBwcm9jZXNzZWRSZXFPcHRzKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY29udGFpbmVyKTtcbiAgICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWNvcmF0ZVByb3h5UmVxT3B0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXMgPSByZXF1aXJlKCcuLi8uLi9saWIvYXMuanMnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2V4cHJlc3MtaHR0cC1wcm94eScpO1xudmFyIHpsaWIgPSByZXF1aXJlKCd6bGliJyk7XG5cbmZ1bmN0aW9uIGlzUmVzR3ppcHBlZChyZXMpIHtcbiAgcmV0dXJuIHJlcy5oZWFkZXJzWydjb250ZW50LWVuY29kaW5nJ10gPT09ICdnemlwJztcbn1cblxuZnVuY3Rpb24gemlwT3JVbnppcChtZXRob2QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHJzcERhdGEsIHJlcykge1xuICAgIHJldHVybiAoaXNSZXNHemlwcGVkKHJlcykgJiYgcnNwRGF0YS5sZW5ndGgpID8gemxpYlttZXRob2RdKHJzcERhdGEpIDogcnNwRGF0YTtcbiAgfTtcbn1cblxudmFyIG1heWJlVW56aXBSZXNwb25zZSA9IHppcE9yVW56aXAoJ2d1bnppcFN5bmMnKTtcbnZhciBtYXliZVppcFJlc3BvbnNlID0gemlwT3JVbnppcCgnZ3ppcFN5bmMnKTtcblxuZnVuY3Rpb24gdmVyaWZ5QnVmZmVyKHJzcGQsIHJlamVjdCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihyc3BkKSkge1xuICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKCd1c2VyUmVzRGVjb3JhdG9yIHNob3VsZCByZXR1cm4gc3RyaW5nIG9yIGJ1ZmZlciBhcyBkYXRhJykpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUhlYWRlcnMocmVzLCByc3BkQmVmb3JlLCByc3BkQWZ0ZXIsIHJlamVjdCkge1xuICBpZiAoIXJlcy5oZWFkZXJzU2VudCkge1xuICAgICAgcmVzLnNldCgnY29udGVudC1sZW5ndGgnLCByc3BkQWZ0ZXIubGVuZ3RoKTtcbiAgfSBlbHNlIGlmIChyc3BkQWZ0ZXIubGVuZ3RoICE9PSByc3BkQmVmb3JlLmxlbmd0aCkge1xuICAgICAgdmFyIGVycm9yID0gJ1wiQ29udGVudC1MZW5ndGhcIiBpcyBhbHJlYWR5IHNlbnQsJyArXG4gICAgICAgICAgJ3RoZSBsZW5ndGggb2YgcmVzcG9uc2UgZGF0YSBjYW4gbm90IGJlIGNoYW5nZWQnO1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoZXJyb3IpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWNvcmF0ZVByb3h5UmVzQm9keShjb250YWluZXIpIHtcbiAgdmFyIHJlc29sdmVyRm4gPSBjb250YWluZXIub3B0aW9ucy51c2VyUmVzRGVjb3JhdG9yO1xuXG4gIGlmICghcmVzb2x2ZXJGbikge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY29udGFpbmVyKTtcbiAgfVxuXG4gIHZhciBwcm94eVJlc0RhdGEgPSBtYXliZVVuemlwUmVzcG9uc2UoY29udGFpbmVyLnByb3h5LnJlc0RhdGEsIGNvbnRhaW5lci5wcm94eS5yZXMpO1xuICB2YXIgcHJveHlSZXMgPSBjb250YWluZXIucHJveHkucmVzO1xuICB2YXIgcmVxID0gY29udGFpbmVyLnVzZXIucmVxO1xuICB2YXIgcmVzID0gY29udGFpbmVyLnVzZXIucmVzO1xuXG4gIGlmIChyZXMuc3RhdHVzQ29kZSA9PT0gMzA0KSB7XG4gICAgZGVidWcoJ1NraXBwaW5nIHVzZXJSZXNEZWNvcmF0b3Igb24gcmVzcG9uc2UgMzA0Jyk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjb250YWluZXIpO1xuICB9XG5cbiAgcmV0dXJuIFByb21pc2VcbiAgICAucmVzb2x2ZShyZXNvbHZlckZuKHByb3h5UmVzLCBwcm94eVJlc0RhdGEsIHJlcSwgcmVzKSlcbiAgICAudGhlbihmdW5jdGlvbihtb2RpZmllZFJlc0RhdGEpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIHJzcGQgPSBhcy5idWZmZXIobW9kaWZpZWRSZXNEYXRhLCBjb250YWluZXIub3B0aW9ucyk7XG4gICAgICAgIHZlcmlmeUJ1ZmZlcihyc3BkLCByZWplY3QpO1xuICAgICAgICB1cGRhdGVIZWFkZXJzKHJlcywgcHJveHlSZXNEYXRhLCByc3BkLCByZWplY3QpO1xuICAgICAgICBjb250YWluZXIucHJveHkucmVzRGF0YSA9IG1heWJlWmlwUmVzcG9uc2UocnNwZCwgY29udGFpbmVyLnByb3h5LnJlcyk7XG4gICAgICAgIHJlc29sdmUoY29udGFpbmVyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlY29yYXRlUHJveHlSZXNCb2R5O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiemxpYlwiKTsiLCIndXNlIHN0cmljdCc7XG5cblxuZnVuY3Rpb24gZGVjb3JhdGVVc2VyUmVzSGVhZGVycyhjb250YWluZXIpIHtcbiAgdmFyIHJlc29sdmVyRm4gPSBjb250YWluZXIub3B0aW9ucy51c2VyUmVzSGVhZGVyRGVjb3JhdG9yO1xuICB2YXIgaGVhZGVycyA9IGNvbnRhaW5lci51c2VyLnJlcy5faGVhZGVycztcblxuICBpZiAoIXJlc29sdmVyRm4pIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNvbnRhaW5lcik7XG4gIH1cblxuICByZXR1cm4gUHJvbWlzZVxuICAgIC5yZXNvbHZlKHJlc29sdmVyRm4oaGVhZGVycywgY29udGFpbmVyLnVzZXIucmVxLCBjb250YWluZXIudXNlci5yZXMsIGNvbnRhaW5lci5wcm94eS5yZXEsIGNvbnRhaW5lci5wcm94eS5yZXMpKVxuICAgIC50aGVuKGZ1bmN0aW9uKGhlYWRlcnMpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICAgIGNvbnRhaW5lci51c2VyLnJlcy5zZXQoaGVhZGVycyk7XG4gICAgICAgIHJlc29sdmUoY29udGFpbmVyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlY29yYXRlVXNlclJlc0hlYWRlcnM7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIE5vLW9wIHZlcnNpb24gb2YgZmlsdGVyLiAgQWxsb3dzIGV2ZXJ5dGhpbmchXG5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIocHJveHlSZXFPcHRCdWlsZGVyLCB1c2VyUmVxKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGZpbHRlclVzZXJSZXF1ZXN0KGNvbnRhaW5lcikge1xuICB2YXIgcmVzb2x2ZXJGbiA9IGNvbnRhaW5lci5vcHRpb25zLmZpbHRlciB8fCBkZWZhdWx0RmlsdGVyO1xuXG4gIHJldHVybiBQcm9taXNlXG4gICAgLnJlc29sdmUocmVzb2x2ZXJGbihjb250YWluZXIudXNlci5yZXEsIGNvbnRhaW5lci51c2VyLnJlcykpXG4gICAgLnRoZW4oZnVuY3Rpb24gKHNob3VsZElDb250aW51ZSkge1xuICAgICAgaWYgKHNob3VsZElDb250aW51ZSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNvbnRhaW5lcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoKTsgLy8gcmVqZWN0IHdpdGggbm8gYXJncyBzaG91bGQgc2ltcGx5IGNhbGwgbmV4dCgpXG4gICAgICB9XG4gICAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmlsdGVyVXNlclJlcXVlc3Q7XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZXhwcmVzcy1odHRwLXByb3h5Jyk7XG5cbmZ1bmN0aW9uIGNvbm5lY3Rpb25SZXNldEhhbmRsZXIoZXJyLCByZXMpIHtcbiAgaWYgKGVyciAmJiBlcnIuY29kZSA9PT0gJ0VDT05OUkVTRVQnKSB7XG4gICAgZGVidWcoJ0Vycm9yOiBDb25uZWN0aW9uIHJlc2V0IGR1ZSB0byB0aW1lb3V0LicpO1xuICAgIHJlcy5zZXRIZWFkZXIoJ1gtVGltZW91dC1SZWFzb24nLCAnZXhwcmVzcy1odHRwLXByb3h5IHJlc2V0IHRoZSByZXF1ZXN0LicpO1xuICAgIHJlcy53cml0ZUhlYWQoNTA0LCB7J0NvbnRlbnQtVHlwZSc6ICd0ZXh0L3BsYWluJ30pO1xuICAgIHJlcy5lbmQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVQcm94eUVycm9ycyhlcnIsIHJlcywgbmV4dCkge1xuICBzd2l0Y2ggKGVyciAmJiBlcnIuY29kZSkge1xuICAgIGNhc2UgJ0VDT05OUkVTRVQnOiAgeyByZXR1cm4gY29ubmVjdGlvblJlc2V0SGFuZGxlcihlcnIsIHJlcywgbmV4dCk7IH1cbiAgICBkZWZhdWx0OiAgICAgICAgICAgIHsgbmV4dChlcnIpOyB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYW5kbGVQcm94eUVycm9ycztcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gZGVmYXVsdFNraXBGaWx0ZXIoLyogcmVzICovKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbWF5YmVTa2lwVG9OZXh0SGFuZGxlcihjb250YWluZXIpIHtcbiAgdmFyIHJlc29sdmVyRm4gPSBjb250YWluZXIub3B0aW9ucy5za2lwVG9OZXh0SGFuZGxlckZpbHRlciB8fCBkZWZhdWx0U2tpcEZpbHRlcjtcblxuICByZXR1cm4gUHJvbWlzZVxuICAgIC5yZXNvbHZlKHJlc29sdmVyRm4oY29udGFpbmVyLnByb3h5LnJlcykpXG4gICAgLnRoZW4oZnVuY3Rpb24gKHNob3VsZFNraXBUb05leHQpIHtcbiAgICAgIGlmIChzaG91bGRTa2lwVG9OZXh0KSB7XG4gICAgICAgIGNvbnRhaW5lci51c2VyLnJlcy5leHByZXNzSHR0cFByb3h5ID0gY29udGFpbmVyLnByb3h5O1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoY29udGFpbmVyLnVzZXIubmV4dCgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY29udGFpbmVyKTtcbiAgICAgIH1cbiAgICB9KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1heWJlU2tpcFRvTmV4dEhhbmRsZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhcyA9IHJlcXVpcmUoJy4uLy4uL2xpYi9hcycpO1xuXG5mdW5jdGlvbiBnZXRDb250ZW50TGVuZ3RoKGJvZHkpIHtcblxuICB2YXIgcmVzdWx0O1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGJvZHkpKSB7IC8vIEJ1ZmZlclxuICAgIHJlc3VsdCA9IGJvZHkubGVuZ3RoO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKGJvZHkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cblxuZnVuY3Rpb24gcHJlcGFyZVByb3h5UmVxKGNvbnRhaW5lcikge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgIHZhciBib2R5Q29udGVudCA9IGNvbnRhaW5lci5wcm94eS5ib2R5Q29udGVudDtcbiAgICB2YXIgcmVxT3B0ID0gY29udGFpbmVyLnByb3h5LnJlcUJ1aWxkZXI7XG5cbiAgICBpZiAoYm9keUNvbnRlbnQpIHtcbiAgICAgIGJvZHlDb250ZW50ID0gY29udGFpbmVyLm9wdGlvbnMucmVxQXNCdWZmZXIgP1xuICAgICAgICBhcy5idWZmZXIoYm9keUNvbnRlbnQsIGNvbnRhaW5lci5vcHRpb25zKSA6XG4gICAgICAgIGFzLmJ1ZmZlck9yU3RyaW5nKGJvZHlDb250ZW50KTtcblxuICAgICAgcmVxT3B0LmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10gPSBnZXRDb250ZW50TGVuZ3RoKGJvZHlDb250ZW50KTtcblxuICAgICAgaWYgKGNvbnRhaW5lci5vcHRpb25zLnJlcUJvZHlFbmNvZGluZykge1xuICAgICAgICByZXFPcHQuaGVhZGVyc1snQWNjZXB0LUNoYXJzZXQnXSA9IGNvbnRhaW5lci5vcHRpb25zLnJlcUJvZHlFbmNvZGluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb250YWluZXIucHJveHkuYm9keUNvbnRlbnQgPSBib2R5Q29udGVudDtcbiAgICByZXNvbHZlKGNvbnRhaW5lcik7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHByZXBhcmVQcm94eVJlcTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlcXVlc3RPcHRpb25zID0gcmVxdWlyZSgnLi4vLi4vbGliL3JlcXVlc3RPcHRpb25zJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVQcm94eUhvc3QoY29udGFpbmVyKSB7XG4gIHZhciBwYXJzZWRIb3N0O1xuXG4gIGlmIChjb250YWluZXIub3B0aW9ucy5tZW1vaXplSG9zdCAmJiBjb250YWluZXIub3B0aW9ucy5tZW1vaXplZEhvc3QpIHtcbiAgICBwYXJzZWRIb3N0ID0gY29udGFpbmVyLm9wdGlvbnMubWVtb2l6ZWRIb3N0O1xuICB9IGVsc2Uge1xuICAgIHBhcnNlZEhvc3QgPSByZXF1ZXN0T3B0aW9ucy5wYXJzZUhvc3QoY29udGFpbmVyKTtcbiAgfVxuXG4gIGNvbnRhaW5lci5wcm94eS5yZXFCdWlsZGVyLmhvc3QgPSBwYXJzZWRIb3N0Lmhvc3Q7XG4gIGNvbnRhaW5lci5wcm94eS5yZXFCdWlsZGVyLnBvcnQgPSBjb250YWluZXIub3B0aW9ucy5wb3J0IHx8IHBhcnNlZEhvc3QucG9ydDtcbiAgY29udGFpbmVyLnByb3h5LnJlcXVlc3RNb2R1bGUgPSBwYXJzZWRIb3N0Lm1vZHVsZTtcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjb250YWluZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlc29sdmVQcm94eUhvc3Q7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2V4cHJlc3MtaHR0cC1wcm94eScpO1xuXG5mdW5jdGlvbiBkZWZhdWx0UHJveHlSZXFQYXRoUmVzb2x2ZXIocmVxKSB7XG4gIHJldHVybiB1cmwucGFyc2UocmVxLnVybCkucGF0aDtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVByb3h5UmVxUGF0aChjb250YWluZXIpIHtcbiAgdmFyIHJlc29sdmVyRm4gPSBjb250YWluZXIub3B0aW9ucy5wcm94eVJlcVBhdGhSZXNvbHZlciB8fCBkZWZhdWx0UHJveHlSZXFQYXRoUmVzb2x2ZXI7XG5cbiAgcmV0dXJuIFByb21pc2VcbiAgICAucmVzb2x2ZShyZXNvbHZlckZuKGNvbnRhaW5lci51c2VyLnJlcSkpXG4gICAgLnRoZW4oZnVuY3Rpb24ocmVzb2x2ZWRQYXRoKSB7XG4gICAgICBjb250YWluZXIucHJveHkucmVxQnVpbGRlci5wYXRoID0gcmVzb2x2ZWRQYXRoO1xuICAgICAgZGVidWcoJ3Jlc29sdmVkIHByb3h5IHBhdGg6JywgcmVzb2x2ZWRQYXRoKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY29udGFpbmVyKTtcbiAgICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXNvbHZlUHJveHlSZXFQYXRoO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2h1bmtMZW5ndGggPSByZXF1aXJlKCcuLi8uLi9saWIvY2h1bmtMZW5ndGgnKTtcblxuZnVuY3Rpb24gc2VuZFByb3h5UmVxdWVzdChDb250YWluZXIpIHtcbiAgdmFyIHJlcSA9IENvbnRhaW5lci51c2VyLnJlcTtcbiAgdmFyIGJvZHlDb250ZW50ID0gQ29udGFpbmVyLnByb3h5LmJvZHlDb250ZW50O1xuICB2YXIgcmVxT3B0ID0gQ29udGFpbmVyLnByb3h5LnJlcUJ1aWxkZXI7XG4gIHZhciBvcHRpb25zID0gQ29udGFpbmVyLm9wdGlvbnM7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBwcm90b2NvbCA9IENvbnRhaW5lci5wcm94eS5yZXF1ZXN0TW9kdWxlO1xuICAgIHZhciBwcm94eVJlcSA9IENvbnRhaW5lci5wcm94eS5yZXEgPSBwcm90b2NvbC5yZXF1ZXN0KHJlcU9wdCwgZnVuY3Rpb24ocnNwKSB7XG4gICAgICBpZiAob3B0aW9ucy5zdHJlYW0pIHtcbiAgICAgICAgQ29udGFpbmVyLnByb3h5LnJlcyA9IHJzcDtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoQ29udGFpbmVyKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNodW5rcyA9IFtdO1xuICAgICAgcnNwLm9uKCdkYXRhJywgZnVuY3Rpb24oY2h1bmspIHsgY2h1bmtzLnB1c2goY2h1bmspOyB9KTtcbiAgICAgIHJzcC5vbignZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIENvbnRhaW5lci5wcm94eS5yZXMgPSByc3A7XG4gICAgICAgIENvbnRhaW5lci5wcm94eS5yZXNEYXRhID0gQnVmZmVyLmNvbmNhdChjaHVua3MsIGNodW5rTGVuZ3RoKGNodW5rcykpO1xuICAgICAgICByZXNvbHZlKENvbnRhaW5lcik7XG4gICAgICB9KTtcbiAgICAgIHJzcC5vbignZXJyb3InLCByZWplY3QpO1xuICAgIH0pO1xuXG4gICAgcHJveHlSZXEub24oJ3NvY2tldCcsIGZ1bmN0aW9uKHNvY2tldCkge1xuICAgICAgaWYgKG9wdGlvbnMudGltZW91dCkge1xuICAgICAgICBzb2NrZXQuc2V0VGltZW91dChvcHRpb25zLnRpbWVvdXQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHByb3h5UmVxLmFib3J0KCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcHJveHlSZXEub24oJ2Vycm9yJywgcmVqZWN0KTtcblxuICAgIC8vIHRoaXMgZ3V5IHNob3VsZCBnbyBlbHNld2hlcmUsIGRvd24gdGhlIGNoYWluXG4gICAgaWYgKG9wdGlvbnMucGFyc2VSZXFCb2R5KSB7XG4gICAgLy8gV2UgYXJlIHBhcnNpbmcgdGhlIGJvZHkgb3Vyc2VsdmVzIHNvIHdlIG5lZWQgdG8gd3JpdGUgdGhlIGJvZHkgY29udGVudFxuICAgIC8vIGFuZCB0aGVuIG1hbnVhbGx5IGVuZCB0aGUgcmVxdWVzdC5cblxuICAgICAgLy9pZiAoYm9keUNvbnRlbnQgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgLy90aHJvdyBuZXcgRXJyb3JcbiAgICAgICAgLy9kZWJ1Z2dlcjtcbiAgICAgICAgLy9ib2R5Q29udGVudCA9IEpTT04uc3RyaW5naWZ5KGJvZHlDb250ZW50KTtcbiAgICAgIC8vfVxuXG4gICAgICBpZiAoYm9keUNvbnRlbnQubGVuZ3RoKSB7XG4gICAgICAgIHZhciBib2R5ID0gYm9keUNvbnRlbnQ7XG4gICAgICAgIHZhciBjb250ZW50VHlwZSA9IHByb3h5UmVxLmdldEhlYWRlcignQ29udGVudC1UeXBlJyk7XG4gICAgICAgIGlmIChjb250ZW50VHlwZSA9PT0gJ3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcgfHwgY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBwYXJhbXMgPSBKU09OLnBhcnNlKGJvZHkpO1xuICAgICAgICAgICAgYm9keSA9IE9iamVjdC5rZXlzKHBhcmFtcykubWFwKGZ1bmN0aW9uKGspIHsgcmV0dXJuIGsgKyAnPScgKyBwYXJhbXNba107IH0pLmpvaW4oJyYnKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBib2R5Q29udGVudCBpcyBub3QganNvbi1mb3JtYXRcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJveHlSZXEuc2V0SGVhZGVyKCdDb250ZW50LUxlbmd0aCcsIEJ1ZmZlci5ieXRlTGVuZ3RoKGJvZHkpKTtcbiAgICAgICAgcHJveHlSZXEud3JpdGUoYm9keSk7XG4gICAgICB9XG4gICAgICBwcm94eVJlcS5lbmQoKTtcbiAgICB9IGVsc2Uge1xuICAgIC8vIFBpcGUgd2lsbCBjYWxsIGVuZCB3aGVuIGl0IGhhcyBjb21wbGV0ZWx5IHJlYWQgZnJvbSB0aGUgcmVxdWVzdC5cbiAgICAgIHJlcS5waXBlKHByb3h5UmVxKTtcbiAgICB9XG5cbiAgICByZXEub24oJ2Fib3J0ZWQnLCBmdW5jdGlvbigpIHtcbiAgICAvLyByZWplY3Q/XG4gICAgICBwcm94eVJlcS5hYm9ydCgpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHNlbmRQcm94eVJlcXVlc3Q7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNodW5rTGVuZ3RoKGNodW5rcykge1xuICByZXR1cm4gY2h1bmtzLnJlZHVjZShmdW5jdGlvbiAobGVuLCBidWYpIHtcbiAgICByZXR1cm4gbGVuICsgYnVmLmxlbmd0aDtcbiAgfSwgMCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2h1bmtMZW5ndGg7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIHNlbmRVc2VyUmVzKENvbnRhaW5lcikge1xuICBpZiAoIUNvbnRhaW5lci51c2VyLnJlcy5oZWFkZXJzU2VudCkge1xuICAgIGlmIChDb250YWluZXIub3B0aW9ucy5zdHJlYW0pIHtcbiAgICAgIENvbnRhaW5lci5wcm94eS5yZXMucGlwZShDb250YWluZXIudXNlci5yZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBDb250YWluZXIudXNlci5yZXMuc2VuZChDb250YWluZXIucHJveHkucmVzRGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoQ29udGFpbmVyKTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHNlbmRVc2VyUmVzO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyByZW5kZXJSb3V0ZXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWNvbmZpZ1wiO1xyXG5pbXBvcnQgSGVhZGVyIGZyb20gXCIuL2NvbXBvbmVudHMvSGVhZGVyXCI7XHJcbmltcG9ydCB7IGZldGNoQ3VycmVudFVzZXIgfSBmcm9tIFwiLi9zdG9yZS9hdXRoL2FjdGlvbnNcIjtcclxuXHJcbmZ1bmN0aW9uIEFwcCh7IHJvdXRlIH06IGFueSkge1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2PlxyXG4gICAgICA8SGVhZGVyIC8+XHJcbiAgICAgIHtyZW5kZXJSb3V0ZXMocm91dGUucm91dGVzKX1cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBjb21wb25lbnQ6IEFwcCxcclxuICBsb2FkRGF0YTogKHsgZGlzcGF0Y2ggfTogYW55KSA9PiBkaXNwYXRjaChmZXRjaEN1cnJlbnRVc2VyKCkpXHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgQXBwU3RhdGUgfSBmcm9tIFwiLi4vc3RvcmVcIjtcclxuXHJcbnR5cGUgUHJvcHMgPSB7XHJcbiAgYXV0aDogYm9vbGVhbjtcclxufTtcclxuXHJcbmZ1bmN0aW9uIEhlYWRlcih7IGF1dGggfTogUHJvcHMpIHtcclxuICBjb25zb2xlLmxvZyhhdXRoKTtcclxuXHJcbiAgY29uc3QgYXV0aExpbmsgPSBhdXRoID8gKFxyXG4gICAgPGEgaHJlZj1cIi9hcGkvbG9nb3V0XCI+TG9nb3V0PC9hPlxyXG4gICkgOiAoXHJcbiAgICA8YSBocmVmPVwiL2FwaS9hdXRoL2dvb2dsZVwiPkxvZ2luPC9hPlxyXG4gICk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2PlxyXG4gICAgICA8TGluayB0bz1cIi9cIj5SZWFjdCBTU1I8L0xpbms+XHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgPExpbmsgdG89XCIvdXNlcnNcIj5Vc2VyczwvTGluaz5cclxuICAgICAgICA8TGluayB0bz1cIi9hZG1pbnNcIj5BZG1pbnM8L0xpbms+XHJcbiAgICAgICAge2F1dGhMaW5rfVxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9ICh7IGF1dGggfTogQXBwU3RhdGUpID0+IHtcclxuICByZXR1cm4geyBhdXRoIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoSGVhZGVyKTtcclxuIiwiaW1wb3J0IHsgRkVUQ0hfQ1VSUkVOVF9VU0VSLCBGZXRjaEN1cnJlbnRVc2VyQWN0aW9uIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmNvbnN0IGF1dGhSZWR1Y2VyID0gKHN0YXRlID0gbnVsbCwgYWN0aW9uOiBGZXRjaEN1cnJlbnRVc2VyQWN0aW9uKSA9PiB7XHJcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSBGRVRDSF9DVVJSRU5UX1VTRVI6XHJcbiAgICAgIHJldHVybiBhY3Rpb24ucGF5bG9hZC5kYXRhIHx8IGZhbHNlO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGF1dGhSZWR1Y2VyO1xyXG4iLCJleHBvcnQgaW50ZXJmYWNlIFVzZXJTdGF0ZSB7XHJcbiAgZGF0YTogYW55O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgRkVUQ0hfQ1VSUkVOVF9VU0VSID0gXCJGRVRDSF9DVVJSRU5UX1VTRVJcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRmV0Y2hDdXJyZW50VXNlckFjdGlvbiB7XHJcbiAgdHlwZTogdHlwZW9mIEZFVENIX0NVUlJFTlRfVVNFUjtcclxuICBwYXlsb2FkOiBVc2VyU3RhdGU7XHJcbn1cclxuIiwiaW1wb3J0IHsgRkVUQ0hfQ1VSUkVOVF9VU0VSIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgRGlzcGF0Y2ggfSBmcm9tIFwicmVkdXhcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBmZXRjaEN1cnJlbnRVc2VyID0gKCkgPT4gYXN5bmMgKFxyXG4gIGRpc3BhdGNoOiBEaXNwYXRjaCxcclxuICBnZXRTdGF0ZTogYW55LFxyXG4gIHJlcXVlc3Q6IGFueVxyXG4pID0+IHtcclxuICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0LmdldChcIi9jdXJyZW50X3VzZXJcIik7XHJcblxyXG4gIGRpc3BhdGNoKHsgdHlwZTogRkVUQ0hfQ1VSUkVOVF9VU0VSLCBwYXlsb2FkOiByZXMgfSk7XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=