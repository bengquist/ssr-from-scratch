!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=6)}([function(e,t){e.exports=require("react")},function(e,t){e.exports=require("react-redux")},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=o(r(48)),s=o(r(11)),i=o(r(12)),a=o(r(53));t.default=[n({},u.default,{routes:[n({},s.default,{path:"/",exact:!0}),n({},i.default,{path:"/users"}),n({},a.default)]})]},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FETCH_USERS="FETCH_USERS"},function(e,t){e.exports=require("react-router-config")},function(e,t){e.exports=require("redux")},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,u){function s(e){try{a(n.next(e))}catch(e){u(e)}}function i(e){try{a(n.throw(e))}catch(e){u(e)}}function a(e){e.done?o(e.value):new r(function(t){t(e.value)}).then(s,i)}a((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,u,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function i(u){return function(i){return function(u){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&u[0]?n.return:u[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,u[1])).done)return o;switch(n=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return s.label++,{value:u[1],done:!1};case 5:s.label++,n=u[1],u=[0];continue;case 7:u=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===u[0]||2===u[0])){s=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){s.label=u[1];break}if(6===u[0]&&s.label<o[1]){s.label=o[1],o=u;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(u);break}o[2]&&s.ops.pop(),s.trys.pop();continue}u=t.call(e,s)}catch(e){u=[6,e],n=0}finally{r=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,i])}}},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},s=this;Object.defineProperty(t,"__esModule",{value:!0});var i=u(r(7)),a=u(r(8)),c=u(r(16)),f=r(4),l=u(r(2)),p=u(r(25)),d=i.default();d.use("/api",p.default("http://react-ssr-api.herokuapp.com",{proxyReqOptDecorator:function(e){return e.headers&&(e.headers["x-forwarded-host"]="localhost:3000"),e}})),d.use(i.default.static("public")),d.get("*",function(e,t){return n(s,void 0,void 0,function(){var r,n,u,s;return o(this,function(o){switch(o.label){case 0:return r=c.default(e),n=f.matchRoutes(l.default,e.path).map(function(e){var t=e.route;return t.loadData?t.loadData(r):null}),[4,Promise.all(n)];case 1:return o.sent(),u={},s=a.default(e,r,u),u.notFound&&t.status(404),t.send(s),[2]}})})}),d.listen(3e3,function(){return console.log("listening on port 3000")})},function(e,t){e.exports=require("express")},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(0)),u=r(9),s=r(10),i=r(1),a=n(r(2)),c=r(4),f=n(r(15));t.default=function(e,t,r){return'\n  <html>\n    <head></head>\n      <body>\n        <div id="root">'+u.renderToString(o.default.createElement(i.Provider,{store:t},o.default.createElement(s.StaticRouter,{location:e.path,context:r},o.default.createElement("div",null,c.renderRoutes(a.default)))))+"</div>\n          <script>\n            window.INITIAL_STATE = "+f.default(t.getState())+'\n          <\/script>\n        <script src="bundle.js"><\/script>\n      </body>\n  </html>\n  '}},function(e,t){e.exports=require("react-dom/server")},function(e,t){e.exports=require("react-router-dom")},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(0));t.default={component:function(){return o.default.createElement("div",null,o.default.createElement("h1",null,"I am Home!!!"),o.default.createElement("button",{onClick:function(){return console.log("yoooo")}},"Click Me!"))}}},function(e,t,r){"use strict";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(0)),u=r(1),s=r(13);var i=function(e){return e.dispatch(s.fetchUsers())};t.loadData=i,t.default={loadData:i,component:u.connect(function(e){return{users:e.users}},{fetchUsers:s.fetchUsers})(function(e){return o.useEffect(function(){e.fetchUsers()},[]),o.default.createElement("div",null,o.default.createElement("p",null,"Here is a big list of users"),o.default.createElement("ul",null,e.users.map(function(e){return o.default.createElement("li",{key:e.id},e.name)})))})}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,u){function s(e){try{a(n.next(e))}catch(e){u(e)}}function i(e){try{a(n.throw(e))}catch(e){u(e)}}function a(e){e.done?o(e.value):new r(function(t){t(e.value)}).then(s,i)}a((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,u,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function i(u){return function(i){return function(u){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&u[0]?n.return:u[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,u[1])).done)return o;switch(n=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return s.label++,{value:u[1],done:!1};case 5:s.label++,n=u[1],u=[0];continue;case 7:u=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===u[0]||2===u[0])){s=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){s.label=u[1];break}if(6===u[0]&&s.label<o[1]){s.label=o[1],o=u;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(u);break}o[2]&&s.ops.pop(),s.trys.pop();continue}u=t.call(e,s)}catch(e){u=[6,e],n=0}finally{r=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,i])}}},u=this;Object.defineProperty(t,"__esModule",{value:!0});var s=r(3);t.fetchUsers=function(){return function(e,t,r){return n(u,void 0,void 0,function(){var t;return o(this,function(n){switch(n.label){case 0:return[4,r.get("/users")];case 1:return t=n.sent(),e({type:s.FETCH_USERS,payload:t}),[2]}})})}}},function(e,t){e.exports=require("axios")},function(e,t){e.exports=require("serialize-javascript")},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(5),u=n(r(17)),s=n(r(14)),i=n(r(18));t.default=function(e){var t=s.default.create({baseURL:"http://react-ssr-api.herokuapp.com",headers:{cookie:e.get("cookie")||""}});return o.createStore(i.default,{},o.applyMiddleware(u.default.withExtraArgument(t)))}},function(e,t){e.exports=require("redux-thunk")},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(5),u=n(r(19)),s=n(r(50)),i=o.combineReducers({users:u.default,auth:s.default});t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(3);t.default=function(e,t){switch(void 0===e&&(e=[]),t.type){case n.FETCH_USERS:return t.payload.data;default:return e}}},function(e,t){e.exports=require("debug")},function(e,t,r){"use strict";e.exports=function(e){return void 0===e||""===e||null===e}},function(e,t,r){"use strict";var n=r(30),o=r(31),u=r(23),s=r(32),i=r(21);function a(e,t){var r=t.headers||{},n=["connection","content-length"];t.preserveHostHdr||n.push("host");var o=function(e,t,r){if(!t)return e;for(var n in t)r&&-1!==r.indexOf(n)||(e[n]=t[n]);return e}(r,e.headers,n);return o.connection="close",o}e.exports={create:function(e,t,r){var n={headers:a(e,r),method:e.method,path:e.path,params:e.params};return r.preserveReqSession&&(n.session=e.session),Promise.resolve(n)},bodyContent:function(e,t,r){if(i(r.parseReqBody)||r.parseReqBody)return function(e,t){return e.body?Promise.resolve(e.body):s(e,{length:e.headers["content-length"],limit:t})}(e,r.limit)},parseHost:function(e){var t=e.params.host,r=e.user.req,s=e.options;if(!(t="function"==typeof t?t(r):t.toString()))return new Error("Empty host parameter");/http(s)?:\/\//.test(t)||(t="http://"+t);var i=u.parse(t);if(!i.hostname)return new Error("Unable to parse hostname, possibly missing protocol://?");var a=s.https||"https:"===i.protocol;return{host:i.hostname,port:i.port||(a?443:80),module:a?o:n}}}},function(e,t){e.exports=require("url")},function(e,t,r){"use strict";e.exports={buffer:function(e,t){var r;return Buffer.isBuffer(e)?r=e:"object"==typeof e?r=new Buffer(JSON.stringify(e),t.reqBodyEncoding):"string"==typeof e&&(r=new Buffer(e,t.reqBodyEncodeing)),r},bufferOrString:function(e){var t;return Buffer.isBuffer(e)?t=e:"object"==typeof e?t=JSON.stringify(e):"string"==typeof e&&(t=e),t}}},function(e,t,r){"use strict";var n=r(26),o=r(28),u=r(20)("express-http-proxy"),s=r(29),i=r(33),a=r(34),c=r(35),f=r(36),l=r(38),p=r(39),d=r(40),h=r(41),y=r(42),v=r(43),x=r(44),m=r(45),b=r(47);e.exports=function(e,t){return o(e,"Host should not be empty"),function(r,o,_){u("[start proxy] "+r.path);var g=new n(r,o,_,e,t);p(g).then(s).then(v).then(c).then(x).then(a).then(y).then(m).then(h).then(i).then(l).then(f).then(b).catch(function(e){e?(g.options.proxyErrorHandler?g.options.proxyErrorHandler:d)(e,o,_):_()})}}},function(e,t,r){"use strict";var n=r(27);e.exports=function(e,t,r,o,u){return{user:{req:e,res:t,next:r},proxy:{req:void 0,res:void 0,resData:void 0,bodyContent:void 0,reqBuilder:{}},options:n(u),params:{host:o,userOptions:u}}}},function(e,t,r){"use strict";var n=r(20)("express-http-proxy"),o=r(21);e.exports=function(e){var t,r;if((e=e||{}).decorateRequest)throw new Error("decorateRequest is REMOVED; use proxyReqOptDecorator andproxyReqBodyDecorator instead.  see README.md");return(e.forwardPath||e.forwardPathAsync)&&console.warn("forwardPath and forwardPathAsync are DEPRECATEDand should be replaced with proxyReqPathResolver"),e.intercept&&console.warn("DEPRECATED: intercept. Use decorateUseRes instead. Please see README for more information."),(t={limit:e.limit||"1mb",proxyReqPathResolver:e.proxyReqPathResolver||e.forwardPathAsync||e.forwardPath,proxyReqOptDecorator:e.proxyReqOptDecorator,proxyReqBodyDecorator:e.proxyReqBodyDecorator,userResDecorator:e.userResDecorator||e.intercept,userResHeaderDecorator:e.userResHeaderDecorator,proxyErrorHandler:e.proxyErrorHandler,filter:e.filter,parseReqBody:!!o(e.parseReqBody)||e.parseReqBody,preserveHostHdr:e.preserveHostHdr,memoizeHost:!!o(e.memoizeHost)||e.memoizeHost,reqBodyEncoding:(r=e.reqBodyEncoding,void 0!==r?r:"utf-8"),skipToNextHandlerFilter:e.skipToNextHandlerFilter,headers:e.headers,preserveReqSession:e.preserveReqSession,https:e.https,port:e.port,reqAsBuffer:e.reqAsBuffer,timeout:e.timeout}).stream=!t.skipToNextHandlerFilter&&!t.userResDecorator&&!t.userResHeaderDecorator,n(t),t}},function(e,t){e.exports=require("assert")},function(e,t,r){"use strict";var n=r(20)("express-http-proxy"),o=r(22);e.exports=function(e){var t=e.user.req,r=e.user.res,u=e.options,s=e.proxy.host,i=u.parseReqBody?o.bodyContent(t,r,u):Promise.resolve(null),a=o.create(t,r,u,s);return Promise.all([i,a]).then(function(t){return e.proxy.bodyContent=t[0],e.proxy.reqBuilder=t[1],n("proxy request options:",e.proxy.reqBuilder),e})}},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("https")},function(e,t){e.exports=require("raw-body")},function(e,t,r){"use strict";e.exports=function(e){return new Promise(function(t){var r=e.user.res,n=e.proxy.res;r.headersSent||(r.status(n.statusCode),Object.keys(n.headers).filter(function(e){return"transfer-encoding"!==e}).forEach(function(e){r.set(e,n.headers[e])})),t(e)})}},function(e,t,r){"use strict";var n=r(20)("express-http-proxy");function o(e){return e}e.exports=function(e){var t=e.options.proxyReqBodyDecorator,r=t||o;return t&&n("using custom proxyReqBodyDecorator"),Promise.resolve(r(e.proxy.bodyContent,e.user.req)).then(function(t){return e.proxy.bodyContent=t,Promise.resolve(e)})}},function(e,t,r){"use strict";var n=r(20)("express-http-proxy");function o(e){return e}e.exports=function(e){var t=e.options.proxyReqOptDecorator||o;return Promise.resolve(t(e.proxy.reqBuilder,e.user.req)).then(function(t){return delete t.params,e.proxy.reqBuilder=t,n("Request options (after processing): %o",t),Promise.resolve(e)})}},function(e,t,r){"use strict";var n=r(24),o=r(20)("express-http-proxy"),u=r(37);function s(e){return function(t,r){return function(e){return"gzip"===e.headers["content-encoding"]}(r)&&t.length?u[e](t):t}}var i=s("gunzipSync"),a=s("gzipSync");e.exports=function(e){var t=e.options.userResDecorator;if(!t)return Promise.resolve(e);var r=i(e.proxy.resData,e.proxy.res),u=e.proxy.res,s=e.user.req,c=e.user.res;return 304===c.statusCode?(o("Skipping userResDecorator on response 304"),Promise.resolve(e)):Promise.resolve(t(u,r,s,c)).then(function(t){return new Promise(function(o,u){var s=n.buffer(t,e.options);!function(e,t){Buffer.isBuffer(e)||t(new Error("userResDecorator should return string or buffer as data"))}(s,u),function(e,t,r,n){e.headersSent?r.length!==t.length&&n(new Error('"Content-Length" is already sent,the length of response data can not be changed')):e.set("content-length",r.length)}(c,r,s,u),e.proxy.resData=a(s,e.proxy.res),o(e)})})}},function(e,t){e.exports=require("zlib")},function(e,t,r){"use strict";e.exports=function(e){var t=e.options.userResHeaderDecorator,r=e.user.res._headers;return t?Promise.resolve(t(r,e.user.req,e.user.res,e.proxy.req,e.proxy.res)).then(function(t){return new Promise(function(r){e.user.res.set(t),r(e)})}):Promise.resolve(e)}},function(e,t,r){"use strict";function n(e,t){return!0}e.exports=function(e){var t=e.options.filter||n;return Promise.resolve(t(e.user.req,e.user.res)).then(function(t){return t?Promise.resolve(e):Promise.reject()})}},function(e,t,r){"use strict";var n=r(20)("express-http-proxy");e.exports=function(e,t,r){switch(e&&e.code){case"ECONNRESET":return function(e,t){e&&"ECONNRESET"===e.code&&(n("Error: Connection reset due to timeout."),t.setHeader("X-Timeout-Reason","express-http-proxy reset the request."),t.writeHead(504,{"Content-Type":"text/plain"}),t.end())}(e,t);default:r(e)}}},function(e,t,r){"use strict";function n(){return!1}e.exports=function(e){var t=e.options.skipToNextHandlerFilter||n;return Promise.resolve(t(e.proxy.res)).then(function(t){return t?(e.user.res.expressHttpProxy=e.proxy,Promise.reject(e.user.next())):Promise.resolve(e)})}},function(e,t,r){"use strict";var n=r(24);e.exports=function(e){return new Promise(function(t){var r,o,u=e.proxy.bodyContent,s=e.proxy.reqBuilder;u&&(u=e.options.reqAsBuffer?n.buffer(u,e.options):n.bufferOrString(u),s.headers["content-length"]=(r=u,Buffer.isBuffer(r)?o=r.length:"string"==typeof r&&(o=Buffer.byteLength(r)),o),e.options.reqBodyEncoding&&(s.headers["Accept-Charset"]=e.options.reqBodyEncoding)),e.proxy.bodyContent=u,t(e)})}},function(e,t,r){"use strict";var n=r(22);e.exports=function(e){var t;return t=e.options.memoizeHost&&e.options.memoizedHost?e.options.memoizedHost:n.parseHost(e),e.proxy.reqBuilder.host=t.host,e.proxy.reqBuilder.port=e.options.port||t.port,e.proxy.requestModule=t.module,Promise.resolve(e)}},function(e,t,r){"use strict";var n=r(23),o=r(20)("express-http-proxy");function u(e){return n.parse(e.url).path}e.exports=function(e){var t=e.options.proxyReqPathResolver||u;return Promise.resolve(t(e.user.req)).then(function(t){return e.proxy.reqBuilder.path=t,o("resolved proxy path:",t),Promise.resolve(e)})}},function(e,t,r){"use strict";var n=r(46);e.exports=function(e){var t=e.user.req,r=e.proxy.bodyContent,o=e.proxy.reqBuilder,u=e.options;return new Promise(function(s,i){var a=e.proxy.requestModule,c=e.proxy.req=a.request(o,function(t){if(u.stream)return e.proxy.res=t,s(e);var r=[];t.on("data",function(e){r.push(e)}),t.on("end",function(){e.proxy.res=t,e.proxy.resData=Buffer.concat(r,n(r)),s(e)}),t.on("error",i)});if(c.on("socket",function(e){u.timeout&&e.setTimeout(u.timeout,function(){c.abort()})}),c.on("error",i),u.parseReqBody){if(r.length){var f=r,l=c.getHeader("Content-Type");if("x-www-form-urlencoded"===l||"application/x-www-form-urlencoded"===l)try{var p=JSON.parse(f);f=Object.keys(p).map(function(e){return e+"="+p[e]}).join("&")}catch(e){}c.setHeader("Content-Length",Buffer.byteLength(f)),c.write(f)}c.end()}else t.pipe(c);t.on("aborted",function(){c.abort()})})}},function(e,t,r){"use strict";e.exports=function(e){return e.reduce(function(e,t){return e+t.length},0)}},function(e,t,r){"use strict";e.exports=function(e){return e.user.res.headersSent||(e.options.stream?e.proxy.res.pipe(e.user.res):e.user.res.send(e.proxy.resData)),Promise.resolve(e)}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(0)),u=r(4),s=n(r(49)),i=r(52);t.default={component:function(e){var t=e.route;return o.default.createElement("div",null,o.default.createElement(s.default,null),u.renderRoutes(t.routes))},loadData:function(e){return(0,e.dispatch)(i.fetchCurrentUser())}}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(0)),u=r(10),s=r(1);t.default=s.connect(function(e){return{auth:e.auth}})(function(e){var t=e.auth?o.default.createElement("a",{href:"/api/logout"},"Logout"):o.default.createElement("a",{href:"/api/auth/google"},"Login");return o.default.createElement("div",null,o.default.createElement(u.Link,{to:"/"},"React SSR"),o.default.createElement("div",null,o.default.createElement(u.Link,{to:"/users"},"Users"),o.default.createElement(u.Link,{to:"/admins"},"Admins"),t))})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(51);t.default=function(e,t){switch(void 0===e&&(e=null),t.type){case n.FETCH_CURRENT_USER:return t.payload.data||!1;default:return e}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FETCH_CURRENT_USER="FETCH_CURRENT_USER"},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,u){function s(e){try{a(n.next(e))}catch(e){u(e)}}function i(e){try{a(n.throw(e))}catch(e){u(e)}}function a(e){e.done?o(e.value):new r(function(t){t(e.value)}).then(s,i)}a((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,u,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function i(u){return function(i){return function(u){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&u[0]?n.return:u[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,u[1])).done)return o;switch(n=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return s.label++,{value:u[1],done:!1};case 5:s.label++,n=u[1],u=[0];continue;case 7:u=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===u[0]||2===u[0])){s=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){s.label=u[1];break}if(6===u[0]&&s.label<o[1]){s.label=o[1],o=u;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(u);break}o[2]&&s.ops.pop(),s.trys.pop();continue}u=t.call(e,s)}catch(e){u=[6,e],n=0}finally{r=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,i])}}},u=this;Object.defineProperty(t,"__esModule",{value:!0});var s=r(51);t.fetchCurrentUser=function(){return function(e,t,r){return n(u,void 0,void 0,function(){var t;return o(this,function(n){switch(n.label){case 0:return[4,r.get("/current_user")];case 1:return t=n.sent(),e({type:s.FETCH_CURRENT_USER,payload:t}),[2]}})})}}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(0));t.default={component:function(e){var t=e.staticContext,r=void 0===t?{}:t;return r.notFound=!0,console.log(r),o.default.createElement("h1",null,"Oof, route not found")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,